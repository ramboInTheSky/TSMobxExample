// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CreateVisitPanel /> hides dateto and timeTo when the checkbox is clicked 1`] = `
<inject-CreateVisitPanel-with-profiles-routing-visits
  match={
    Object {
      "params": Object {
        "profileId": "123",
      },
    }
  }
  profiles={
    ProfilesMock {
      "getDetail": [MockFunction],
      "getList": [MockFunction],
      "isError": false,
      "isLoading": false,
      "item": Object {
        "company": "test 123",
        "created": "2019-04-16T12:03:37.493156",
        "emailAddress": "dsg@dsf.com",
        "firstName": "Clark",
        "id": "1aa657bc-d556-4643-a68f-af46f1bdba89",
        "lastName": "Kent",
        "mobileNumber": "01234567890",
        "notes": "fdsdfsfs",
        "visits": Array [
          Object {
            "archetypeIds": Array [],
            "fromDate": "2015-03-23T11:00:00Z",
            "id": "d3aa88e2-c754-41e0-8ba6-4198a34aa0a2",
            "lockGroups": Array [
              "Default",
              "Boiler",
              "1.11",
            ],
            "tags": Array [
              "123123",
              "234234",
              "345345",
            ],
            "toDate": "2015-11-25T12:00:00Z",
          },
        ],
      },
      "items": Array [
        Object {
          "company": "test 123",
          "created": "2019-04-16T12:03:37.493156",
          "emailAddress": "dsg@dsf.com",
          "firstName": "Clark",
          "id": "1aa657bc-d556-4643-a68f-af46f1bdba89",
          "lastName": "Kent",
          "mobileNumber": "01234567890",
          "notes": "fdsdfsfs",
          "visits": Array [
            Object {
              "archetypeIds": Array [],
              "fromDate": "2015-03-23T11:00:00Z",
              "id": "d3aa88e2-c754-41e0-8ba6-4198a34aa0a2",
              "lockGroups": Array [
                "Default",
                "Boiler",
                "1.11",
              ],
              "tags": Array [
                "123123",
                "234234",
                "345345",
              ],
              "toDate": "2015-11-25T12:00:00Z",
            },
          ],
        },
      ],
    }
  }
  routing={
    RoutingMock {
      "breadcrumb": Array [],
      "getBreadcrumb": [MockFunction],
      "go": [MockFunction],
      "goBack": [MockFunction],
      "goBackToPage": [MockFunction],
      "goForward": [MockFunction],
      "goToPage": [MockFunction],
      "history": Object {},
      "location": Object {},
      "push": [MockFunction],
      "replace": [MockFunction],
      "splitThings": [MockFunction],
    }
  }
  saveFn={[MockFunction]}
  visits={
    VisitsMock {
      "addTag": [Function],
      "archetypes": Object {
        "primary": Array [],
        "secondary": Array [],
      },
      "clearErrors": [MockFunction],
      "detail": Visit {
        "archetypeIds": Array [],
        "fromDate": "",
        "id": "",
        "lockGroups": Array [],
        "tags": Array [],
        "toDate": "",
      },
      "getArchetypes": [MockFunction],
      "item": [Function],
      "simulateValidationError": [Function],
      "validationError": undefined,
    }
  }
>
  <CreateVisitPanel
    match={
      Object {
        "params": Object {
          "profileId": "123",
        },
      }
    }
    profiles={
      ProfilesMock {
        "getDetail": [MockFunction],
        "getList": [MockFunction],
        "isError": false,
        "isLoading": false,
        "item": Object {
          "company": "test 123",
          "created": "2019-04-16T12:03:37.493156",
          "emailAddress": "dsg@dsf.com",
          "firstName": "Clark",
          "id": "1aa657bc-d556-4643-a68f-af46f1bdba89",
          "lastName": "Kent",
          "mobileNumber": "01234567890",
          "notes": "fdsdfsfs",
          "visits": Array [
            Object {
              "archetypeIds": Array [],
              "fromDate": "2015-03-23T11:00:00Z",
              "id": "d3aa88e2-c754-41e0-8ba6-4198a34aa0a2",
              "lockGroups": Array [
                "Default",
                "Boiler",
                "1.11",
              ],
              "tags": Array [
                "123123",
                "234234",
                "345345",
              ],
              "toDate": "2015-11-25T12:00:00Z",
            },
          ],
        },
        "items": Array [
          Object {
            "company": "test 123",
            "created": "2019-04-16T12:03:37.493156",
            "emailAddress": "dsg@dsf.com",
            "firstName": "Clark",
            "id": "1aa657bc-d556-4643-a68f-af46f1bdba89",
            "lastName": "Kent",
            "mobileNumber": "01234567890",
            "notes": "fdsdfsfs",
            "visits": Array [
              Object {
                "archetypeIds": Array [],
                "fromDate": "2015-03-23T11:00:00Z",
                "id": "d3aa88e2-c754-41e0-8ba6-4198a34aa0a2",
                "lockGroups": Array [
                  "Default",
                  "Boiler",
                  "1.11",
                ],
                "tags": Array [
                  "123123",
                  "234234",
                  "345345",
                ],
                "toDate": "2015-11-25T12:00:00Z",
              },
            ],
          },
        ],
      }
    }
    routing={
      RoutingMock {
        "breadcrumb": Array [],
        "getBreadcrumb": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goBackToPage": [MockFunction],
        "goForward": [MockFunction],
        "goToPage": [MockFunction],
        "history": Object {},
        "location": Object {},
        "push": [MockFunction],
        "replace": [MockFunction],
        "splitThings": [MockFunction],
      }
    }
    saveFn={[MockFunction]}
    visits={
      VisitsMock {
        "addTag": [Function],
        "archetypes": Object {
          "primary": Array [],
          "secondary": Array [],
        },
        "clearErrors": [MockFunction],
        "detail": Visit {
          "archetypeIds": Array [],
          "fromDate": "",
          "id": "",
          "lockGroups": Array [],
          "tags": Array [],
          "toDate": "",
        },
        "getArchetypes": [MockFunction],
        "item": [Function],
        "simulateValidationError": [Function],
        "validationError": undefined,
      }
    }
  >
    <Styled(div)>
      <div
        className="css-1esthja"
      >
        <Styled(WithStyles(Paper))>
          <WithStyles(Paper)
            className="css-pmvmau"
          >
            <Paper
              className="css-pmvmau"
              classes={
                Object {
                  "elevation0": "MuiPaper-elevation0-3",
                  "elevation1": "MuiPaper-elevation1-4",
                  "elevation10": "MuiPaper-elevation10-13",
                  "elevation11": "MuiPaper-elevation11-14",
                  "elevation12": "MuiPaper-elevation12-15",
                  "elevation13": "MuiPaper-elevation13-16",
                  "elevation14": "MuiPaper-elevation14-17",
                  "elevation15": "MuiPaper-elevation15-18",
                  "elevation16": "MuiPaper-elevation16-19",
                  "elevation17": "MuiPaper-elevation17-20",
                  "elevation18": "MuiPaper-elevation18-21",
                  "elevation19": "MuiPaper-elevation19-22",
                  "elevation2": "MuiPaper-elevation2-5",
                  "elevation20": "MuiPaper-elevation20-23",
                  "elevation21": "MuiPaper-elevation21-24",
                  "elevation22": "MuiPaper-elevation22-25",
                  "elevation23": "MuiPaper-elevation23-26",
                  "elevation24": "MuiPaper-elevation24-27",
                  "elevation3": "MuiPaper-elevation3-6",
                  "elevation4": "MuiPaper-elevation4-7",
                  "elevation5": "MuiPaper-elevation5-8",
                  "elevation6": "MuiPaper-elevation6-9",
                  "elevation7": "MuiPaper-elevation7-10",
                  "elevation8": "MuiPaper-elevation8-11",
                  "elevation9": "MuiPaper-elevation9-12",
                  "root": "MuiPaper-root-1",
                  "rounded": "MuiPaper-rounded-2",
                }
              }
              component="div"
              elevation={2}
              square={false}
            >
              <div
                className="MuiPaper-root-1 MuiPaper-elevation2-5 MuiPaper-rounded-2 css-pmvmau"
              >
                <Boundary>
                  <Styled(div)>
                    <div
                      className="css-t73pf6"
                    >
                      <Styled(span)>
                        <span
                          className="css-xdgx1w"
                        >
                          <span>
                            <pure(HotelIcon)>
                              <HotelIcon>
                                <WithStyles(SvgIcon)>
                                  <SvgIcon
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction-31",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled-33",
                                        "colorError": "MuiSvgIcon-colorError-32",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary-29",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary-30",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-34",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-36",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-35",
                                        "root": "MuiSvgIcon-root-28",
                                      }
                                    }
                                    color="inherit"
                                    component="svg"
                                    fontSize="default"
                                    viewBox="0 0 24 24"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className="MuiSvgIcon-root-28"
                                      focusable="false"
                                      role="presentation"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M0 0h24v24H0z"
                                        fill="none"
                                      />
                                      <path
                                        d="M7 13c1.66 0 3-1.34 3-3S8.66 7 7 7s-3 1.34-3 3 1.34 3 3 3zm12-6h-8v7H3V5H1v15h2v-3h18v3h2v-9c0-2.21-1.79-4-4-4z"
                                      />
                                    </svg>
                                  </SvgIcon>
                                </WithStyles(SvgIcon)>
                              </HotelIcon>
                            </pure(HotelIcon)>
                             Add Visit
                          </span>
                          <span>
                            <pure(KeyboardArrowRightIcon)>
                              <KeyboardArrowRightIcon>
                                <WithStyles(SvgIcon)>
                                  <SvgIcon
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction-31",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled-33",
                                        "colorError": "MuiSvgIcon-colorError-32",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary-29",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary-30",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-34",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-36",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-35",
                                        "root": "MuiSvgIcon-root-28",
                                      }
                                    }
                                    color="inherit"
                                    component="svg"
                                    fontSize="default"
                                    viewBox="0 0 24 24"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className="MuiSvgIcon-root-28"
                                      focusable="false"
                                      role="presentation"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
                                      />
                                      <path
                                        d="M0 0h24v24H0V0z"
                                        fill="none"
                                      />
                                    </svg>
                                  </SvgIcon>
                                </WithStyles(SvgIcon)>
                              </KeyboardArrowRightIcon>
                            </pure(KeyboardArrowRightIcon)>
                          </span>
                          <Styled(span)>
                            <span
                              className="css-i5ax4f"
                            >
                              <pure(PersonIcon)>
                                <PersonIcon>
                                  <WithStyles(SvgIcon)>
                                    <SvgIcon
                                      classes={
                                        Object {
                                          "colorAction": "MuiSvgIcon-colorAction-31",
                                          "colorDisabled": "MuiSvgIcon-colorDisabled-33",
                                          "colorError": "MuiSvgIcon-colorError-32",
                                          "colorPrimary": "MuiSvgIcon-colorPrimary-29",
                                          "colorSecondary": "MuiSvgIcon-colorSecondary-30",
                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-34",
                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-36",
                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-35",
                                          "root": "MuiSvgIcon-root-28",
                                        }
                                      }
                                      color="inherit"
                                      component="svg"
                                      fontSize="default"
                                      viewBox="0 0 24 24"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className="MuiSvgIcon-root-28"
                                        focusable="false"
                                        role="presentation"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                        />
                                        <path
                                          d="M0 0h24v24H0z"
                                          fill="none"
                                        />
                                      </svg>
                                    </SvgIcon>
                                  </WithStyles(SvgIcon)>
                                </PersonIcon>
                              </pure(PersonIcon)>
                              Clark Kent
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                      <WithStyles(WithFormControlContext(FormControlLabel))
                        control={
                          <WithStyles(Checkbox)
                            checked={false}
                            className="no-end-date-checkbox"
                            onChange={[Function]}
                            value="checkedA"
                          />
                        }
                        label="No End Date"
                      >
                        <WithFormControlContext(FormControlLabel)
                          classes={
                            Object {
                              "disabled": "MuiFormControlLabel-disabled-41",
                              "label": "MuiFormControlLabel-label-42",
                              "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom-40",
                              "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart-38",
                              "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop-39",
                              "root": "MuiFormControlLabel-root-37",
                            }
                          }
                          control={
                            <WithStyles(Checkbox)
                              checked={false}
                              className="no-end-date-checkbox"
                              onChange={[Function]}
                              value="checkedA"
                            />
                          }
                          label="No End Date"
                        >
                          <FormControlLabel
                            classes={
                              Object {
                                "disabled": "MuiFormControlLabel-disabled-41",
                                "label": "MuiFormControlLabel-label-42",
                                "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom-40",
                                "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart-38",
                                "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop-39",
                                "root": "MuiFormControlLabel-root-37",
                              }
                            }
                            control={
                              <WithStyles(Checkbox)
                                checked={false}
                                className="no-end-date-checkbox"
                                onChange={[Function]}
                                value="checkedA"
                              />
                            }
                            label="No End Date"
                            labelPlacement="end"
                          >
                            <label
                              className="MuiFormControlLabel-root-37"
                            >
                              <WithStyles(Checkbox)
                                checked={false}
                                className="no-end-date-checkbox"
                                onChange={[Function]}
                                value="checkedA"
                              >
                                <Checkbox
                                  checked={false}
                                  checkedIcon={<pure(CheckBox) />}
                                  className="no-end-date-checkbox"
                                  classes={
                                    Object {
                                      "checked": "MuiCheckbox-checked-44",
                                      "colorPrimary": "MuiCheckbox-colorPrimary-47",
                                      "colorSecondary": "MuiCheckbox-colorSecondary-48",
                                      "disabled": "MuiCheckbox-disabled-45",
                                      "indeterminate": "MuiCheckbox-indeterminate-46",
                                      "root": "MuiCheckbox-root-43",
                                    }
                                  }
                                  color="secondary"
                                  icon={<pure(CheckBoxOutlineBlank) />}
                                  indeterminate={false}
                                  indeterminateIcon={<pure(IndeterminateCheckBox) />}
                                  onChange={[Function]}
                                  value="checkedA"
                                >
                                  <WithStyles(WithFormControlContext(SwitchBase))
                                    checked={false}
                                    checkedIcon={<pure(CheckBox) />}
                                    className="no-end-date-checkbox"
                                    classes={
                                      Object {
                                        "checked": "MuiCheckbox-checked-44",
                                        "disabled": "MuiCheckbox-disabled-45",
                                        "root": "MuiCheckbox-root-43 MuiCheckbox-colorSecondary-48",
                                      }
                                    }
                                    icon={<pure(CheckBoxOutlineBlank) />}
                                    inputProps={
                                      Object {
                                        "data-indeterminate": false,
                                      }
                                    }
                                    onChange={[Function]}
                                    type="checkbox"
                                    value="checkedA"
                                  >
                                    <WithFormControlContext(SwitchBase)
                                      checked={false}
                                      checkedIcon={<pure(CheckBox) />}
                                      className="no-end-date-checkbox"
                                      classes={
                                        Object {
                                          "checked": "MuiPrivateSwitchBase-checked-50 MuiCheckbox-checked-44",
                                          "disabled": "MuiPrivateSwitchBase-disabled-51 MuiCheckbox-disabled-45",
                                          "input": "MuiPrivateSwitchBase-input-52",
                                          "root": "MuiPrivateSwitchBase-root-49 MuiCheckbox-root-43 MuiCheckbox-colorSecondary-48",
                                        }
                                      }
                                      icon={<pure(CheckBoxOutlineBlank) />}
                                      inputProps={
                                        Object {
                                          "data-indeterminate": false,
                                        }
                                      }
                                      onChange={[Function]}
                                      type="checkbox"
                                      value="checkedA"
                                    >
                                      <SwitchBase
                                        checked={false}
                                        checkedIcon={<pure(CheckBox) />}
                                        className="no-end-date-checkbox"
                                        classes={
                                          Object {
                                            "checked": "MuiPrivateSwitchBase-checked-50 MuiCheckbox-checked-44",
                                            "disabled": "MuiPrivateSwitchBase-disabled-51 MuiCheckbox-disabled-45",
                                            "input": "MuiPrivateSwitchBase-input-52",
                                            "root": "MuiPrivateSwitchBase-root-49 MuiCheckbox-root-43 MuiCheckbox-colorSecondary-48",
                                          }
                                        }
                                        icon={<pure(CheckBoxOutlineBlank) />}
                                        inputProps={
                                          Object {
                                            "data-indeterminate": false,
                                          }
                                        }
                                        onChange={[Function]}
                                        type="checkbox"
                                        value="checkedA"
                                      >
                                        <WithStyles(IconButton)
                                          className="MuiPrivateSwitchBase-root-49 MuiCheckbox-root-43 MuiCheckbox-colorSecondary-48 no-end-date-checkbox"
                                          component="span"
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          tabIndex={null}
                                        >
                                          <IconButton
                                            className="MuiPrivateSwitchBase-root-49 MuiCheckbox-root-43 MuiCheckbox-colorSecondary-48 no-end-date-checkbox"
                                            classes={
                                              Object {
                                                "colorInherit": "MuiIconButton-colorInherit-54",
                                                "colorPrimary": "MuiIconButton-colorPrimary-55",
                                                "colorSecondary": "MuiIconButton-colorSecondary-56",
                                                "disabled": "MuiIconButton-disabled-57",
                                                "label": "MuiIconButton-label-58",
                                                "root": "MuiIconButton-root-53",
                                              }
                                            }
                                            color="default"
                                            component="span"
                                            disabled={false}
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            tabIndex={null}
                                          >
                                            <WithStyles(ButtonBase)
                                              centerRipple={true}
                                              className="MuiIconButton-root-53 MuiPrivateSwitchBase-root-49 MuiCheckbox-root-43 MuiCheckbox-colorSecondary-48 no-end-date-checkbox"
                                              component="span"
                                              disabled={false}
                                              focusRipple={true}
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              tabIndex={null}
                                            >
                                              <ButtonBase
                                                centerRipple={true}
                                                className="MuiIconButton-root-53 MuiPrivateSwitchBase-root-49 MuiCheckbox-root-43 MuiCheckbox-colorSecondary-48 no-end-date-checkbox"
                                                classes={
                                                  Object {
                                                    "disabled": "MuiButtonBase-disabled-60",
                                                    "focusVisible": "MuiButtonBase-focusVisible-61",
                                                    "root": "MuiButtonBase-root-59",
                                                  }
                                                }
                                                component="span"
                                                disableRipple={false}
                                                disableTouchRipple={false}
                                                disabled={false}
                                                focusRipple={true}
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                tabIndex={null}
                                                type="button"
                                              >
                                                <span
                                                  className="MuiButtonBase-root-59 MuiIconButton-root-53 MuiPrivateSwitchBase-root-49 MuiCheckbox-root-43 MuiCheckbox-colorSecondary-48 no-end-date-checkbox"
                                                  onBlur={[Function]}
                                                  onContextMenu={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseUp={[Function]}
                                                  onTouchEnd={[Function]}
                                                  onTouchMove={[Function]}
                                                  onTouchStart={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <span
                                                    className="MuiIconButton-label-58"
                                                  >
                                                    <pure(CheckBoxOutlineBlank)>
                                                      <CheckBoxOutlineBlank>
                                                        <WithStyles(SvgIcon)>
                                                          <SvgIcon
                                                            classes={
                                                              Object {
                                                                "colorAction": "MuiSvgIcon-colorAction-31",
                                                                "colorDisabled": "MuiSvgIcon-colorDisabled-33",
                                                                "colorError": "MuiSvgIcon-colorError-32",
                                                                "colorPrimary": "MuiSvgIcon-colorPrimary-29",
                                                                "colorSecondary": "MuiSvgIcon-colorSecondary-30",
                                                                "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-34",
                                                                "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-36",
                                                                "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-35",
                                                                "root": "MuiSvgIcon-root-28",
                                                              }
                                                            }
                                                            color="inherit"
                                                            component="svg"
                                                            fontSize="default"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className="MuiSvgIcon-root-28"
                                                              focusable="false"
                                                              role="presentation"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <path
                                                                d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                              />
                                                            </svg>
                                                          </SvgIcon>
                                                        </WithStyles(SvgIcon)>
                                                      </CheckBoxOutlineBlank>
                                                    </pure(CheckBoxOutlineBlank)>
                                                    <input
                                                      checked={false}
                                                      className="MuiPrivateSwitchBase-input-52"
                                                      data-indeterminate={false}
                                                      onChange={[Function]}
                                                      type="checkbox"
                                                      value="checkedA"
                                                    />
                                                  </span>
                                                  <NoSsr
                                                    defer={false}
                                                    fallback={null}
                                                  >
                                                    <WithStyles(TouchRipple)
                                                      center={true}
                                                      innerRef={[Function]}
                                                    >
                                                      <TouchRipple
                                                        center={true}
                                                        classes={
                                                          Object {
                                                            "child": "MuiTouchRipple-child-193",
                                                            "childLeaving": "MuiTouchRipple-childLeaving-194",
                                                            "childPulsate": "MuiTouchRipple-childPulsate-195",
                                                            "ripple": "MuiTouchRipple-ripple-190",
                                                            "ripplePulsate": "MuiTouchRipple-ripplePulsate-192",
                                                            "rippleVisible": "MuiTouchRipple-rippleVisible-191",
                                                            "root": "MuiTouchRipple-root-189",
                                                          }
                                                        }
                                                      >
                                                        <TransitionGroup
                                                          childFactory={[Function]}
                                                          className="MuiTouchRipple-root-189"
                                                          component="span"
                                                          enter={true}
                                                          exit={true}
                                                        >
                                                          <span
                                                            className="MuiTouchRipple-root-189"
                                                          />
                                                        </TransitionGroup>
                                                      </TouchRipple>
                                                    </WithStyles(TouchRipple)>
                                                  </NoSsr>
                                                </span>
                                              </ButtonBase>
                                            </WithStyles(ButtonBase)>
                                          </IconButton>
                                        </WithStyles(IconButton)>
                                      </SwitchBase>
                                    </WithFormControlContext(SwitchBase)>
                                  </WithStyles(WithFormControlContext(SwitchBase))>
                                </Checkbox>
                              </WithStyles(Checkbox)>
                              <WithStyles(Typography)
                                className="MuiFormControlLabel-label-42"
                                component="span"
                              >
                                <Typography
                                  align="inherit"
                                  className="MuiFormControlLabel-label-42"
                                  classes={
                                    Object {
                                      "alignCenter": "MuiTypography-alignCenter-85",
                                      "alignJustify": "MuiTypography-alignJustify-87",
                                      "alignLeft": "MuiTypography-alignLeft-84",
                                      "alignRight": "MuiTypography-alignRight-86",
                                      "body1": "MuiTypography-body1-71",
                                      "body2": "MuiTypography-body2-70",
                                      "button": "MuiTypography-button-73",
                                      "caption": "MuiTypography-caption-72",
                                      "colorError": "MuiTypography-colorError-96",
                                      "colorInherit": "MuiTypography-colorInherit-91",
                                      "colorPrimary": "MuiTypography-colorPrimary-92",
                                      "colorSecondary": "MuiTypography-colorSecondary-93",
                                      "colorTextPrimary": "MuiTypography-colorTextPrimary-94",
                                      "colorTextSecondary": "MuiTypography-colorTextSecondary-95",
                                      "display1": "MuiTypography-display1-66",
                                      "display2": "MuiTypography-display2-65",
                                      "display3": "MuiTypography-display3-64",
                                      "display4": "MuiTypography-display4-63",
                                      "gutterBottom": "MuiTypography-gutterBottom-89",
                                      "h1": "MuiTypography-h1-74",
                                      "h2": "MuiTypography-h2-75",
                                      "h3": "MuiTypography-h3-76",
                                      "h4": "MuiTypography-h4-77",
                                      "h5": "MuiTypography-h5-78",
                                      "h6": "MuiTypography-h6-79",
                                      "headline": "MuiTypography-headline-67",
                                      "inline": "MuiTypography-inline-97",
                                      "noWrap": "MuiTypography-noWrap-88",
                                      "overline": "MuiTypography-overline-82",
                                      "paragraph": "MuiTypography-paragraph-90",
                                      "root": "MuiTypography-root-62",
                                      "srOnly": "MuiTypography-srOnly-83",
                                      "subheading": "MuiTypography-subheading-69",
                                      "subtitle1": "MuiTypography-subtitle1-80",
                                      "subtitle2": "MuiTypography-subtitle2-81",
                                      "title": "MuiTypography-title-68",
                                    }
                                  }
                                  color="default"
                                  component="span"
                                  gutterBottom={false}
                                  headlineMapping={
                                    Object {
                                      "body1": "p",
                                      "body2": "p",
                                      "display1": "h1",
                                      "display2": "h1",
                                      "display3": "h1",
                                      "display4": "h1",
                                      "h1": "h1",
                                      "h2": "h2",
                                      "h3": "h3",
                                      "h4": "h4",
                                      "h5": "h5",
                                      "h6": "h6",
                                      "headline": "h1",
                                      "subheading": "h3",
                                      "subtitle1": "h6",
                                      "subtitle2": "h6",
                                      "title": "h2",
                                    }
                                  }
                                  inline={false}
                                  noWrap={false}
                                  paragraph={false}
                                  theme={
                                    Object {
                                      "breakpoints": Object {
                                        "between": [Function],
                                        "down": [Function],
                                        "keys": Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ],
                                        "only": [Function],
                                        "up": [Function],
                                        "values": Object {
                                          "lg": 1280,
                                          "md": 960,
                                          "sm": 600,
                                          "xl": 1920,
                                          "xs": 0,
                                        },
                                        "width": [Function],
                                      },
                                      "direction": "ltr",
                                      "mixins": Object {
                                        "gutters": [Function],
                                        "toolbar": Object {
                                          "@media (min-width:0px) and (orientation: landscape)": Object {
                                            "minHeight": 48,
                                          },
                                          "@media (min-width:600px)": Object {
                                            "minHeight": 64,
                                          },
                                          "minHeight": 56,
                                        },
                                      },
                                      "overrides": Object {},
                                      "palette": Object {
                                        "action": Object {
                                          "active": "rgba(0, 0, 0, 0.54)",
                                          "disabled": "rgba(0, 0, 0, 0.26)",
                                          "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                          "hover": "rgba(0, 0, 0, 0.08)",
                                          "hoverOpacity": 0.08,
                                          "selected": "rgba(0, 0, 0, 0.14)",
                                        },
                                        "augmentColor": [Function],
                                        "background": Object {
                                          "default": "#fafafa",
                                          "paper": "#fff",
                                        },
                                        "common": Object {
                                          "black": "#000",
                                          "white": "#fff",
                                        },
                                        "contrastThreshold": 3,
                                        "divider": "rgba(0, 0, 0, 0.12)",
                                        "error": Object {
                                          "contrastText": "#fff",
                                          "dark": "#d32f2f",
                                          "light": "#e57373",
                                          "main": "#f44336",
                                        },
                                        "getContrastText": [Function],
                                        "grey": Object {
                                          "100": "#f5f5f5",
                                          "200": "#eeeeee",
                                          "300": "#e0e0e0",
                                          "400": "#bdbdbd",
                                          "50": "#fafafa",
                                          "500": "#9e9e9e",
                                          "600": "#757575",
                                          "700": "#616161",
                                          "800": "#424242",
                                          "900": "#212121",
                                          "A100": "#d5d5d5",
                                          "A200": "#aaaaaa",
                                          "A400": "#303030",
                                          "A700": "#616161",
                                        },
                                        "primary": Object {
                                          "contrastText": "#fff",
                                          "dark": "#303f9f",
                                          "light": "#7986cb",
                                          "main": "#3f51b5",
                                        },
                                        "secondary": Object {
                                          "contrastText": "#fff",
                                          "dark": "#c51162",
                                          "light": "#ff4081",
                                          "main": "#f50057",
                                        },
                                        "text": Object {
                                          "disabled": "rgba(0, 0, 0, 0.38)",
                                          "hint": "rgba(0, 0, 0, 0.38)",
                                          "primary": "rgba(0, 0, 0, 0.87)",
                                          "secondary": "rgba(0, 0, 0, 0.54)",
                                        },
                                        "tonalOffset": 0.2,
                                        "type": "light",
                                      },
                                      "props": Object {},
                                      "shadows": Array [
                                        "none",
                                        "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                        "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                        "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                      ],
                                      "shape": Object {
                                        "borderRadius": 4,
                                      },
                                      "spacing": Object {
                                        "unit": 8,
                                      },
                                      "transitions": Object {
                                        "create": [Function],
                                        "duration": Object {
                                          "complex": 375,
                                          "enteringScreen": 225,
                                          "leavingScreen": 195,
                                          "short": 250,
                                          "shorter": 200,
                                          "shortest": 150,
                                          "standard": 300,
                                        },
                                        "easing": Object {
                                          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                        },
                                        "getAutoHeightDuration": [Function],
                                      },
                                      "typography": Object {
                                        "body1": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 400,
                                          "lineHeight": "1.46429em",
                                        },
                                        "body1Next": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.00938em",
                                          "lineHeight": 1.5,
                                        },
                                        "body2": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 500,
                                          "lineHeight": "1.71429em",
                                        },
                                        "body2Next": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.01071em",
                                          "lineHeight": 1.5,
                                        },
                                        "button": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 500,
                                          "textTransform": "uppercase",
                                        },
                                        "buttonNext": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 500,
                                          "letterSpacing": "0.02857em",
                                          "lineHeight": 1.75,
                                          "textTransform": "uppercase",
                                        },
                                        "caption": Object {
                                          "color": "rgba(0, 0, 0, 0.54)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.75rem",
                                          "fontWeight": 400,
                                          "lineHeight": "1.375em",
                                        },
                                        "captionNext": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.75rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.03333em",
                                          "lineHeight": 1.66,
                                        },
                                        "display1": Object {
                                          "color": "rgba(0, 0, 0, 0.54)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "2.125rem",
                                          "fontWeight": 400,
                                          "lineHeight": "1.20588em",
                                        },
                                        "display2": Object {
                                          "color": "rgba(0, 0, 0, 0.54)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "2.8125rem",
                                          "fontWeight": 400,
                                          "lineHeight": "1.13333em",
                                          "marginLeft": "-.02em",
                                        },
                                        "display3": Object {
                                          "color": "rgba(0, 0, 0, 0.54)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "3.5rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "-.02em",
                                          "lineHeight": "1.30357em",
                                          "marginLeft": "-.02em",
                                        },
                                        "display4": Object {
                                          "color": "rgba(0, 0, 0, 0.54)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "7rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "-.04em",
                                          "lineHeight": "1.14286em",
                                          "marginLeft": "-.04em",
                                        },
                                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                        "fontSize": 14,
                                        "fontWeightLight": 300,
                                        "fontWeightMedium": 500,
                                        "fontWeightRegular": 400,
                                        "h1": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "6rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "-0.01562em",
                                          "lineHeight": 1,
                                        },
                                        "h2": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "3.75rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "-0.00833em",
                                          "lineHeight": 1,
                                        },
                                        "h3": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "3rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0em",
                                          "lineHeight": 1.04,
                                        },
                                        "h4": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "2.125rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.00735em",
                                          "lineHeight": 1.17,
                                        },
                                        "h5": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1.5rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0em",
                                          "lineHeight": 1.33,
                                        },
                                        "h6": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1.25rem",
                                          "fontWeight": 500,
                                          "letterSpacing": "0.0075em",
                                          "lineHeight": 1.6,
                                        },
                                        "headline": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1.5rem",
                                          "fontWeight": 400,
                                          "lineHeight": "1.35417em",
                                        },
                                        "overline": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.75rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.08333em",
                                          "lineHeight": 2.66,
                                          "textTransform": "uppercase",
                                        },
                                        "pxToRem": [Function],
                                        "round": [Function],
                                        "subheading": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1rem",
                                          "fontWeight": 400,
                                          "lineHeight": "1.5em",
                                        },
                                        "subtitle1": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.00938em",
                                          "lineHeight": 1.75,
                                        },
                                        "subtitle2": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 500,
                                          "letterSpacing": "0.00714em",
                                          "lineHeight": 1.57,
                                        },
                                        "title": Object {
                                          "color": "rgba(0, 0, 0, 0.87)",
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1.3125rem",
                                          "fontWeight": 500,
                                          "lineHeight": "1.16667em",
                                        },
                                        "useNextVariants": false,
                                      },
                                      "zIndex": Object {
                                        "appBar": 1100,
                                        "drawer": 1200,
                                        "mobileStepper": 1000,
                                        "modal": 1300,
                                        "snackbar": 1400,
                                        "tooltip": 1500,
                                      },
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTypography-root-62 MuiTypography-body1-71 MuiFormControlLabel-label-42"
                                  >
                                    No End Date
                                  </span>
                                </Typography>
                              </WithStyles(Typography)>
                            </label>
                          </FormControlLabel>
                        </WithFormControlContext(FormControlLabel)>
                      </WithStyles(WithFormControlContext(FormControlLabel))>
                    </div>
                  </Styled(div)>
                </Boundary>
                <Boundary>
                  <MuiPickersUtilsProvider
                    utils={[Function]}
                  >
                    <CSSTransitionGroup
                      transitionAppear={true}
                      transitionAppearTimeout={200}
                      transitionEnter={true}
                      transitionEnterTimeout={200}
                      transitionLeave={true}
                      transitionLeaveTimeout={200}
                      transitionName="fade"
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        component="span"
                        transitionAppear={true}
                        transitionAppearTimeout={200}
                        transitionEnter={true}
                        transitionEnterTimeout={200}
                        transitionLeave={true}
                        transitionLeaveTimeout={200}
                        transitionName="fade"
                      >
                        <span>
                          <CSSTransitionGroupChild
                            appear={true}
                            appearTimeout={200}
                            enter={true}
                            enterTimeout={200}
                            key=".0"
                            leave={true}
                            leaveTimeout={200}
                            name="fade"
                          >
                            <Styled(div)
                              className="pickers"
                              key=".0"
                            >
                              <div
                                className="pickers css-13c05ck"
                              >
                                <Styled(div)>
                                  <div
                                    className="css-1fijtdw"
                                  >
                                    <ForwardRef
                                      className="date-from-datepicker"
                                      format="LL, (dddd)"
                                      label="Date From"
                                      maxDate={4733510400000}
                                      onChange={[Function]}
                                      value={2119-12-31T23:59:59.998Z}
                                    >
                                      <DatePickerInline
                                        className="date-from-datepicker"
                                        format="LL, (dddd)"
                                        forwardedRef={null}
                                        label="Date From"
                                        maxDate={4733510400000}
                                        onChange={[Function]}
                                        value={2119-12-31T23:59:59.998Z}
                                        views={
                                          Array [
                                            "year",
                                            "day",
                                          ]
                                        }
                                      >
                                        <WithUtils(BasePicker)
                                          autoOk={true}
                                          className="date-from-datepicker"
                                          format="LL, (dddd)"
                                          forwardedRef={null}
                                          label="Date From"
                                          maxDate={4733510400000}
                                          onChange={[Function]}
                                          value={2119-12-31T23:59:59.998Z}
                                          views={
                                            Array [
                                              "year",
                                              "day",
                                            ]
                                          }
                                        >
                                          <BasePicker
                                            ampm={true}
                                            autoOK={false}
                                            autoOk={true}
                                            className="date-from-datepicker"
                                            format="LL, (dddd)"
                                            forwardedRef={null}
                                            label="Date From"
                                            maxDate={4733510400000}
                                            onChange={[Function]}
                                            utils={
                                              MomentUtils {
                                                "dateFormat": "MMMM Do",
                                                "dateTime12hFormat": "MMMM Do hh:mm a",
                                                "dateTime24hFormat": "MMMM Do HH:mm",
                                                "locale": undefined,
                                                "moment": [Function],
                                                "time12hFormat": "hh:mm A",
                                                "time24hFormat": "HH:mm",
                                                "yearFormat": "YYYY",
                                                "yearMonthFormat": "MMMM YYYY",
                                              }
                                            }
                                            value={2119-12-31T23:59:59.998Z}
                                            views={
                                              Array [
                                                "year",
                                                "day",
                                              ]
                                            }
                                          >
                                            <WithStyles(InlineWrapper)
                                              className="date-from-datepicker"
                                              format="LL, (dddd)"
                                              handleAccept={[Function]}
                                              innerRef={null}
                                              isAccepted={false}
                                              label="Date From"
                                              maxDate={4733510400000}
                                              onChange={[Function]}
                                              onClear={[Function]}
                                              value={2119-12-31T23:59:59.998Z}
                                            >
                                              <InlineWrapper
                                                className="date-from-datepicker"
                                                classes={
                                                  Object {
                                                    "popoverPaper": "InlineWrapper-popoverPaper-98",
                                                    "popoverPaperWider": "InlineWrapper-popoverPaperWider-99",
                                                  }
                                                }
                                                format="LL, (dddd)"
                                                handleAccept={[Function]}
                                                isAccepted={false}
                                                label="Date From"
                                                maxDate={4733510400000}
                                                onChange={[Function]}
                                                onClear={[Function]}
                                                onlyCalendar={false}
                                                value={2119-12-31T23:59:59.998Z}
                                              >
                                                <WithUtils(DateTextField)
                                                  className="date-from-datepicker"
                                                  format="LL, (dddd)"
                                                  label="Date From"
                                                  maxDate={4733510400000}
                                                  onChange={[Function]}
                                                  onClear={[Function]}
                                                  onClick={[Function]}
                                                  value={2119-12-31T23:59:59.998Z}
                                                >
                                                  <DateTextField
                                                    InputAdornmentProps={Object {}}
                                                    KeyboardButtonProps={Object {}}
                                                    TextFieldComponent={[Function]}
                                                    adornmentPosition="end"
                                                    className="date-from-datepicker"
                                                    clearable={false}
                                                    disableFuture={false}
                                                    disableOpenOnEnter={false}
                                                    disablePast={false}
                                                    disabled={false}
                                                    emptyLabel=""
                                                    format="LL, (dddd)"
                                                    invalidDateMessage="Invalid Date Format"
                                                    invalidLabel="Unknown"
                                                    keepCharPositions={false}
                                                    keyboard={false}
                                                    keyboardIcon={<KeyboardIcon />}
                                                    label="Date From"
                                                    maxDate={4733510400000}
                                                    maxDateMessage="Date should not be after maximal date"
                                                    minDate={1900-01-01T00:00:00.000Z}
                                                    minDateMessage="Date should not be before minimal date"
                                                    onChange={[Function]}
                                                    onClear={[Function]}
                                                    onClick={[Function]}
                                                    utils={
                                                      MomentUtils {
                                                        "dateFormat": "MMMM Do",
                                                        "dateTime12hFormat": "MMMM Do hh:mm a",
                                                        "dateTime24hFormat": "MMMM Do HH:mm",
                                                        "locale": undefined,
                                                        "moment": [Function],
                                                        "time12hFormat": "hh:mm A",
                                                        "time24hFormat": "HH:mm",
                                                        "yearFormat": "YYYY",
                                                        "yearMonthFormat": "MMMM YYYY",
                                                      }
                                                    }
                                                    value={2119-12-31T23:59:59.998Z}
                                                  >
                                                    <TextField
                                                      InputProps={
                                                        Object {
                                                          "inputComponent": [Function],
                                                          "inputProps": Object {
                                                            "keepCharPositions": undefined,
                                                            "mask": null,
                                                            "pipe": null,
                                                            "readOnly": true,
                                                          },
                                                        }
                                                      }
                                                      className="date-from-datepicker"
                                                      disabled={false}
                                                      error={false}
                                                      helperText=""
                                                      label="Date From"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      required={false}
                                                      select={false}
                                                      value="January 1, 2120, (Monday)"
                                                      variant="standard"
                                                    >
                                                      <WithStyles(FormControl)
                                                        className="date-from-datepicker"
                                                        disabled={false}
                                                        error={false}
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        required={false}
                                                        variant="standard"
                                                      >
                                                        <FormControl
                                                          className="date-from-datepicker"
                                                          classes={
                                                            Object {
                                                              "fullWidth": "MuiFormControl-fullWidth-103",
                                                              "marginDense": "MuiFormControl-marginDense-102",
                                                              "marginNormal": "MuiFormControl-marginNormal-101",
                                                              "root": "MuiFormControl-root-100",
                                                            }
                                                          }
                                                          component="div"
                                                          disabled={false}
                                                          error={false}
                                                          fullWidth={false}
                                                          margin="none"
                                                          onClick={[Function]}
                                                          onKeyPress={[Function]}
                                                          required={false}
                                                          variant="standard"
                                                        >
                                                          <div
                                                            className="MuiFormControl-root-100 date-from-datepicker"
                                                            onClick={[Function]}
                                                            onKeyPress={[Function]}
                                                          >
                                                            <WithStyles(WithFormControlContext(InputLabel))>
                                                              <WithFormControlContext(InputLabel)
                                                                classes={
                                                                  Object {
                                                                    "animated": "MuiInputLabel-animated-112",
                                                                    "disabled": "MuiInputLabel-disabled-106",
                                                                    "error": "MuiInputLabel-error-107",
                                                                    "filled": "MuiInputLabel-filled-113",
                                                                    "focused": "MuiInputLabel-focused-105",
                                                                    "formControl": "MuiInputLabel-formControl-109",
                                                                    "marginDense": "MuiInputLabel-marginDense-110",
                                                                    "outlined": "MuiInputLabel-outlined-114",
                                                                    "required": "MuiInputLabel-required-108",
                                                                    "root": "MuiInputLabel-root-104",
                                                                    "shrink": "MuiInputLabel-shrink-111",
                                                                  }
                                                                }
                                                              >
                                                                <InputLabel
                                                                  classes={
                                                                    Object {
                                                                      "animated": "MuiInputLabel-animated-112",
                                                                      "disabled": "MuiInputLabel-disabled-106",
                                                                      "error": "MuiInputLabel-error-107",
                                                                      "filled": "MuiInputLabel-filled-113",
                                                                      "focused": "MuiInputLabel-focused-105",
                                                                      "formControl": "MuiInputLabel-formControl-109",
                                                                      "marginDense": "MuiInputLabel-marginDense-110",
                                                                      "outlined": "MuiInputLabel-outlined-114",
                                                                      "required": "MuiInputLabel-required-108",
                                                                      "root": "MuiInputLabel-root-104",
                                                                      "shrink": "MuiInputLabel-shrink-111",
                                                                    }
                                                                  }
                                                                  disableAnimation={false}
                                                                  muiFormControl={
                                                                    Object {
                                                                      "adornedStart": false,
                                                                      "disabled": false,
                                                                      "error": false,
                                                                      "filled": true,
                                                                      "focused": false,
                                                                      "margin": "none",
                                                                      "onBlur": [Function],
                                                                      "onEmpty": [Function],
                                                                      "onFilled": [Function],
                                                                      "onFocus": [Function],
                                                                      "required": false,
                                                                      "variant": "standard",
                                                                    }
                                                                  }
                                                                >
                                                                  <WithStyles(WithFormControlContext(FormLabel))
                                                                    className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112 MuiInputLabel-shrink-111"
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiInputLabel-disabled-106",
                                                                        "error": "MuiInputLabel-error-107",
                                                                        "focused": "MuiInputLabel-focused-105",
                                                                        "required": "MuiInputLabel-required-108",
                                                                      }
                                                                    }
                                                                    data-shrink={true}
                                                                  >
                                                                    <WithFormControlContext(FormLabel)
                                                                      className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112 MuiInputLabel-shrink-111"
                                                                      classes={
                                                                        Object {
                                                                          "asterisk": "MuiFormLabel-asterisk-121",
                                                                          "disabled": "MuiFormLabel-disabled-117 MuiInputLabel-disabled-106",
                                                                          "error": "MuiFormLabel-error-118 MuiInputLabel-error-107",
                                                                          "filled": "MuiFormLabel-filled-119",
                                                                          "focused": "MuiFormLabel-focused-116 MuiInputLabel-focused-105",
                                                                          "required": "MuiFormLabel-required-120 MuiInputLabel-required-108",
                                                                          "root": "MuiFormLabel-root-115",
                                                                        }
                                                                      }
                                                                      data-shrink={true}
                                                                    >
                                                                      <FormLabel
                                                                        className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112 MuiInputLabel-shrink-111"
                                                                        classes={
                                                                          Object {
                                                                            "asterisk": "MuiFormLabel-asterisk-121",
                                                                            "disabled": "MuiFormLabel-disabled-117 MuiInputLabel-disabled-106",
                                                                            "error": "MuiFormLabel-error-118 MuiInputLabel-error-107",
                                                                            "filled": "MuiFormLabel-filled-119",
                                                                            "focused": "MuiFormLabel-focused-116 MuiInputLabel-focused-105",
                                                                            "required": "MuiFormLabel-required-120 MuiInputLabel-required-108",
                                                                            "root": "MuiFormLabel-root-115",
                                                                          }
                                                                        }
                                                                        component="label"
                                                                        data-shrink={true}
                                                                        muiFormControl={
                                                                          Object {
                                                                            "adornedStart": false,
                                                                            "disabled": false,
                                                                            "error": false,
                                                                            "filled": true,
                                                                            "focused": false,
                                                                            "margin": "none",
                                                                            "onBlur": [Function],
                                                                            "onEmpty": [Function],
                                                                            "onFilled": [Function],
                                                                            "onFocus": [Function],
                                                                            "required": false,
                                                                            "variant": "standard",
                                                                          }
                                                                        }
                                                                      >
                                                                        <label
                                                                          className="MuiFormLabel-root-115 MuiFormLabel-filled-119 MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112 MuiInputLabel-shrink-111"
                                                                          data-shrink={true}
                                                                        >
                                                                          Date From
                                                                        </label>
                                                                      </FormLabel>
                                                                    </WithFormControlContext(FormLabel)>
                                                                  </WithStyles(WithFormControlContext(FormLabel))>
                                                                </InputLabel>
                                                              </WithFormControlContext(InputLabel)>
                                                            </WithStyles(WithFormControlContext(InputLabel))>
                                                            <WithStyles(Input)
                                                              inputComponent={[Function]}
                                                              inputProps={
                                                                Object {
                                                                  "keepCharPositions": undefined,
                                                                  "mask": null,
                                                                  "pipe": null,
                                                                  "readOnly": true,
                                                                }
                                                              }
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              value="January 1, 2120, (Monday)"
                                                            >
                                                              <Input
                                                                classes={
                                                                  Object {
                                                                    "disabled": "MuiInput-disabled-125",
                                                                    "error": "MuiInput-error-127",
                                                                    "focused": "MuiInput-focused-124",
                                                                    "formControl": "MuiInput-formControl-123",
                                                                    "fullWidth": "MuiInput-fullWidth-129",
                                                                    "input": "MuiInput-input-130",
                                                                    "inputMarginDense": "MuiInput-inputMarginDense-131",
                                                                    "inputMultiline": "MuiInput-inputMultiline-132",
                                                                    "inputType": "MuiInput-inputType-133",
                                                                    "inputTypeSearch": "MuiInput-inputTypeSearch-134",
                                                                    "multiline": "MuiInput-multiline-128",
                                                                    "root": "MuiInput-root-122",
                                                                    "underline": "MuiInput-underline-126",
                                                                  }
                                                                }
                                                                inputComponent={[Function]}
                                                                inputProps={
                                                                  Object {
                                                                    "keepCharPositions": undefined,
                                                                    "mask": null,
                                                                    "pipe": null,
                                                                    "readOnly": true,
                                                                  }
                                                                }
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                value="January 1, 2120, (Monday)"
                                                              >
                                                                <WithStyles(WithFormControlContext(InputBase))
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "MuiInput-disabled-125",
                                                                      "error": "MuiInput-error-127",
                                                                      "focused": "MuiInput-focused-124",
                                                                      "formControl": "MuiInput-formControl-123",
                                                                      "fullWidth": "MuiInput-fullWidth-129",
                                                                      "input": "MuiInput-input-130",
                                                                      "inputMarginDense": "MuiInput-inputMarginDense-131",
                                                                      "inputMultiline": "MuiInput-inputMultiline-132",
                                                                      "inputType": "MuiInput-inputType-133",
                                                                      "inputTypeSearch": "MuiInput-inputTypeSearch-134",
                                                                      "multiline": "MuiInput-multiline-128",
                                                                      "root": "MuiInput-root-122 MuiInput-underline-126",
                                                                      "underline": null,
                                                                    }
                                                                  }
                                                                  fullWidth={false}
                                                                  inputComponent={[Function]}
                                                                  inputProps={
                                                                    Object {
                                                                      "keepCharPositions": undefined,
                                                                      "mask": null,
                                                                      "pipe": null,
                                                                      "readOnly": true,
                                                                    }
                                                                  }
                                                                  multiline={false}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  type="text"
                                                                  value="January 1, 2120, (Monday)"
                                                                >
                                                                  <WithFormControlContext(InputBase)
                                                                    classes={
                                                                      Object {
                                                                        "adornedEnd": "MuiInputBase-adornedEnd-140",
                                                                        "adornedStart": "MuiInputBase-adornedStart-139",
                                                                        "disabled": "MuiInputBase-disabled-138 MuiInput-disabled-125",
                                                                        "error": "MuiInputBase-error-141 MuiInput-error-127",
                                                                        "focused": "MuiInputBase-focused-137 MuiInput-focused-124",
                                                                        "formControl": "MuiInputBase-formControl-136 MuiInput-formControl-123",
                                                                        "fullWidth": "MuiInputBase-fullWidth-144 MuiInput-fullWidth-129",
                                                                        "input": "MuiInputBase-input-145 MuiInput-input-130",
                                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-151",
                                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart-150",
                                                                        "inputMarginDense": "MuiInputBase-inputMarginDense-146 MuiInput-inputMarginDense-131",
                                                                        "inputMultiline": "MuiInputBase-inputMultiline-147 MuiInput-inputMultiline-132",
                                                                        "inputType": "MuiInputBase-inputType-148 MuiInput-inputType-133",
                                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch-149 MuiInput-inputTypeSearch-134",
                                                                        "marginDense": "MuiInputBase-marginDense-142",
                                                                        "multiline": "MuiInputBase-multiline-143 MuiInput-multiline-128",
                                                                        "root": "MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126",
                                                                      }
                                                                    }
                                                                    fullWidth={false}
                                                                    inputComponent={[Function]}
                                                                    inputProps={
                                                                      Object {
                                                                        "keepCharPositions": undefined,
                                                                        "mask": null,
                                                                        "pipe": null,
                                                                        "readOnly": true,
                                                                      }
                                                                    }
                                                                    multiline={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    type="text"
                                                                    value="January 1, 2120, (Monday)"
                                                                  >
                                                                    <InputBase
                                                                      classes={
                                                                        Object {
                                                                          "adornedEnd": "MuiInputBase-adornedEnd-140",
                                                                          "adornedStart": "MuiInputBase-adornedStart-139",
                                                                          "disabled": "MuiInputBase-disabled-138 MuiInput-disabled-125",
                                                                          "error": "MuiInputBase-error-141 MuiInput-error-127",
                                                                          "focused": "MuiInputBase-focused-137 MuiInput-focused-124",
                                                                          "formControl": "MuiInputBase-formControl-136 MuiInput-formControl-123",
                                                                          "fullWidth": "MuiInputBase-fullWidth-144 MuiInput-fullWidth-129",
                                                                          "input": "MuiInputBase-input-145 MuiInput-input-130",
                                                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-151",
                                                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart-150",
                                                                          "inputMarginDense": "MuiInputBase-inputMarginDense-146 MuiInput-inputMarginDense-131",
                                                                          "inputMultiline": "MuiInputBase-inputMultiline-147 MuiInput-inputMultiline-132",
                                                                          "inputType": "MuiInputBase-inputType-148 MuiInput-inputType-133",
                                                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch-149 MuiInput-inputTypeSearch-134",
                                                                          "marginDense": "MuiInputBase-marginDense-142",
                                                                          "multiline": "MuiInputBase-multiline-143 MuiInput-multiline-128",
                                                                          "root": "MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126",
                                                                        }
                                                                      }
                                                                      fullWidth={false}
                                                                      inputComponent={[Function]}
                                                                      inputProps={
                                                                        Object {
                                                                          "keepCharPositions": undefined,
                                                                          "mask": null,
                                                                          "pipe": null,
                                                                          "readOnly": true,
                                                                        }
                                                                      }
                                                                      muiFormControl={
                                                                        Object {
                                                                          "adornedStart": false,
                                                                          "disabled": false,
                                                                          "error": false,
                                                                          "filled": true,
                                                                          "focused": false,
                                                                          "margin": "none",
                                                                          "onBlur": [Function],
                                                                          "onEmpty": [Function],
                                                                          "onFilled": [Function],
                                                                          "onFocus": [Function],
                                                                          "required": false,
                                                                          "variant": "standard",
                                                                        }
                                                                      }
                                                                      multiline={false}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value="January 1, 2120, (Monday)"
                                                                    >
                                                                      <div
                                                                        className="MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126 MuiInputBase-formControl-136 MuiInput-formControl-123"
                                                                        onClick={[Function]}
                                                                      >
                                                                        <Input
                                                                          aria-invalid={false}
                                                                          className="MuiInputBase-input-145 MuiInput-input-130"
                                                                          disabled={false}
                                                                          inputRef={[Function]}
                                                                          mask={null}
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          pipe={null}
                                                                          readOnly={true}
                                                                          required={false}
                                                                          type="text"
                                                                          value="January 1, 2120, (Monday)"
                                                                        >
                                                                          <input
                                                                            aria-invalid={false}
                                                                            className="MuiInputBase-input-145 MuiInput-input-130"
                                                                            disabled={false}
                                                                            mask={null}
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            pipe={null}
                                                                            readOnly={true}
                                                                            required={false}
                                                                            type="text"
                                                                            value="January 1, 2120, (Monday)"
                                                                          />
                                                                        </Input>
                                                                      </div>
                                                                    </InputBase>
                                                                  </WithFormControlContext(InputBase)>
                                                                </WithStyles(WithFormControlContext(InputBase))>
                                                              </Input>
                                                            </WithStyles(Input)>
                                                          </div>
                                                        </FormControl>
                                                      </WithStyles(FormControl)>
                                                    </TextField>
                                                  </DateTextField>
                                                </WithUtils(DateTextField)>
                                                <WithStyles(Popover)
                                                  anchorEl={null}
                                                  anchorOrigin={
                                                    Object {
                                                      "horizontal": "center",
                                                      "vertical": "bottom",
                                                    }
                                                  }
                                                  classes={
                                                    Object {
                                                      "paper": "InlineWrapper-popoverPaper-98",
                                                    }
                                                  }
                                                  id="picker-popover"
                                                  onClose={[Function]}
                                                  open={false}
                                                  transformOrigin={
                                                    Object {
                                                      "horizontal": "center",
                                                      "vertical": "top",
                                                    }
                                                  }
                                                >
                                                  <Popover
                                                    TransitionComponent={[Function]}
                                                    anchorEl={null}
                                                    anchorOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "bottom",
                                                      }
                                                    }
                                                    anchorReference="anchorEl"
                                                    classes={
                                                      Object {
                                                        "paper": "MuiPopover-paper-152 InlineWrapper-popoverPaper-98",
                                                      }
                                                    }
                                                    elevation={8}
                                                    id="picker-popover"
                                                    marginThreshold={16}
                                                    onClose={[Function]}
                                                    open={false}
                                                    transformOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                    transitionDuration="auto"
                                                  >
                                                    <WithStyles(Modal)
                                                      BackdropProps={
                                                        Object {
                                                          "invisible": true,
                                                        }
                                                      }
                                                      id="picker-popover"
                                                      onClose={[Function]}
                                                      open={false}
                                                    >
                                                      <Modal
                                                        BackdropComponent={[Function]}
                                                        BackdropProps={
                                                          Object {
                                                            "invisible": true,
                                                          }
                                                        }
                                                        classes={
                                                          Object {
                                                            "hidden": "MuiModal-hidden-154",
                                                            "root": "MuiModal-root-153",
                                                          }
                                                        }
                                                        closeAfterTransition={false}
                                                        disableAutoFocus={false}
                                                        disableBackdropClick={false}
                                                        disableEnforceFocus={false}
                                                        disableEscapeKeyDown={false}
                                                        disablePortal={false}
                                                        disableRestoreFocus={false}
                                                        hideBackdrop={false}
                                                        id="picker-popover"
                                                        keepMounted={false}
                                                        manager={
                                                          ModalManager {
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "modals": Array [],
                                                          }
                                                        }
                                                        onClose={[Function]}
                                                        open={false}
                                                      />
                                                    </WithStyles(Modal)>
                                                  </Popover>
                                                </WithStyles(Popover)>
                                              </InlineWrapper>
                                            </WithStyles(InlineWrapper)>
                                          </BasePicker>
                                        </WithUtils(BasePicker)>
                                      </DatePickerInline>
                                    </ForwardRef>
                                    <ForwardRef
                                      className="date-from-timepicker"
                                      label="Time From"
                                      minutesStep={15}
                                      onChange={[Function]}
                                      value={2119-12-31T23:59:59.998Z}
                                    >
                                      <TimePickerInline
                                        className="date-from-timepicker"
                                        forwardedRef={null}
                                        label="Time From"
                                        minutesStep={15}
                                        onChange={[Function]}
                                        value={2119-12-31T23:59:59.998Z}
                                      >
                                        <WithUtils(BasePicker)
                                          autoOk={true}
                                          className="date-from-timepicker"
                                          forwardedRef={null}
                                          label="Time From"
                                          mergePreviousDateOnChange={true}
                                          minutesStep={15}
                                          onChange={[Function]}
                                          value={2119-12-31T23:59:59.998Z}
                                        >
                                          <BasePicker
                                            ampm={true}
                                            autoOK={false}
                                            autoOk={true}
                                            className="date-from-timepicker"
                                            forwardedRef={null}
                                            label="Time From"
                                            mergePreviousDateOnChange={true}
                                            minutesStep={15}
                                            onChange={[Function]}
                                            utils={
                                              MomentUtils {
                                                "dateFormat": "MMMM Do",
                                                "dateTime12hFormat": "MMMM Do hh:mm a",
                                                "dateTime24hFormat": "MMMM Do HH:mm",
                                                "locale": undefined,
                                                "moment": [Function],
                                                "time12hFormat": "hh:mm A",
                                                "time24hFormat": "HH:mm",
                                                "yearFormat": "YYYY",
                                                "yearMonthFormat": "MMMM YYYY",
                                              }
                                            }
                                            value={2119-12-31T23:59:59.998Z}
                                          >
                                            <WithStyles(InlineWrapper)
                                              className="date-from-timepicker"
                                              format="hh:mm A"
                                              handleAccept={[Function]}
                                              innerRef={null}
                                              isAccepted={false}
                                              label="Time From"
                                              onChange={[Function]}
                                              onClear={[Function]}
                                              value={2119-12-31T23:59:59.998Z}
                                            >
                                              <InlineWrapper
                                                className="date-from-timepicker"
                                                classes={
                                                  Object {
                                                    "popoverPaper": "InlineWrapper-popoverPaper-98",
                                                    "popoverPaperWider": "InlineWrapper-popoverPaperWider-99",
                                                  }
                                                }
                                                format="hh:mm A"
                                                handleAccept={[Function]}
                                                isAccepted={false}
                                                label="Time From"
                                                onChange={[Function]}
                                                onClear={[Function]}
                                                onlyCalendar={false}
                                                value={2119-12-31T23:59:59.998Z}
                                              >
                                                <WithUtils(DateTextField)
                                                  className="date-from-timepicker"
                                                  format="hh:mm A"
                                                  label="Time From"
                                                  onChange={[Function]}
                                                  onClear={[Function]}
                                                  onClick={[Function]}
                                                  value={2119-12-31T23:59:59.998Z}
                                                >
                                                  <DateTextField
                                                    InputAdornmentProps={Object {}}
                                                    KeyboardButtonProps={Object {}}
                                                    TextFieldComponent={[Function]}
                                                    adornmentPosition="end"
                                                    className="date-from-timepicker"
                                                    clearable={false}
                                                    disableFuture={false}
                                                    disableOpenOnEnter={false}
                                                    disablePast={false}
                                                    disabled={false}
                                                    emptyLabel=""
                                                    format="hh:mm A"
                                                    invalidDateMessage="Invalid Date Format"
                                                    invalidLabel="Unknown"
                                                    keepCharPositions={false}
                                                    keyboard={false}
                                                    keyboardIcon={<KeyboardIcon />}
                                                    label="Time From"
                                                    maxDate={2100-01-01T00:00:00.000Z}
                                                    maxDateMessage="Date should not be after maximal date"
                                                    minDate={1900-01-01T00:00:00.000Z}
                                                    minDateMessage="Date should not be before minimal date"
                                                    onChange={[Function]}
                                                    onClear={[Function]}
                                                    onClick={[Function]}
                                                    utils={
                                                      MomentUtils {
                                                        "dateFormat": "MMMM Do",
                                                        "dateTime12hFormat": "MMMM Do hh:mm a",
                                                        "dateTime24hFormat": "MMMM Do HH:mm",
                                                        "locale": undefined,
                                                        "moment": [Function],
                                                        "time12hFormat": "hh:mm A",
                                                        "time24hFormat": "HH:mm",
                                                        "yearFormat": "YYYY",
                                                        "yearMonthFormat": "MMMM YYYY",
                                                      }
                                                    }
                                                    value={2119-12-31T23:59:59.998Z}
                                                  >
                                                    <TextField
                                                      InputProps={
                                                        Object {
                                                          "inputComponent": [Function],
                                                          "inputProps": Object {
                                                            "keepCharPositions": undefined,
                                                            "mask": null,
                                                            "pipe": null,
                                                            "readOnly": true,
                                                          },
                                                        }
                                                      }
                                                      className="date-from-timepicker"
                                                      disabled={false}
                                                      error={false}
                                                      helperText=""
                                                      label="Time From"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      required={false}
                                                      select={false}
                                                      value="11:59 PM"
                                                      variant="standard"
                                                    >
                                                      <WithStyles(FormControl)
                                                        className="date-from-timepicker"
                                                        disabled={false}
                                                        error={false}
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        required={false}
                                                        variant="standard"
                                                      >
                                                        <FormControl
                                                          className="date-from-timepicker"
                                                          classes={
                                                            Object {
                                                              "fullWidth": "MuiFormControl-fullWidth-103",
                                                              "marginDense": "MuiFormControl-marginDense-102",
                                                              "marginNormal": "MuiFormControl-marginNormal-101",
                                                              "root": "MuiFormControl-root-100",
                                                            }
                                                          }
                                                          component="div"
                                                          disabled={false}
                                                          error={false}
                                                          fullWidth={false}
                                                          margin="none"
                                                          onClick={[Function]}
                                                          onKeyPress={[Function]}
                                                          required={false}
                                                          variant="standard"
                                                        >
                                                          <div
                                                            className="MuiFormControl-root-100 date-from-timepicker"
                                                            onClick={[Function]}
                                                            onKeyPress={[Function]}
                                                          >
                                                            <WithStyles(WithFormControlContext(InputLabel))>
                                                              <WithFormControlContext(InputLabel)
                                                                classes={
                                                                  Object {
                                                                    "animated": "MuiInputLabel-animated-112",
                                                                    "disabled": "MuiInputLabel-disabled-106",
                                                                    "error": "MuiInputLabel-error-107",
                                                                    "filled": "MuiInputLabel-filled-113",
                                                                    "focused": "MuiInputLabel-focused-105",
                                                                    "formControl": "MuiInputLabel-formControl-109",
                                                                    "marginDense": "MuiInputLabel-marginDense-110",
                                                                    "outlined": "MuiInputLabel-outlined-114",
                                                                    "required": "MuiInputLabel-required-108",
                                                                    "root": "MuiInputLabel-root-104",
                                                                    "shrink": "MuiInputLabel-shrink-111",
                                                                  }
                                                                }
                                                              >
                                                                <InputLabel
                                                                  classes={
                                                                    Object {
                                                                      "animated": "MuiInputLabel-animated-112",
                                                                      "disabled": "MuiInputLabel-disabled-106",
                                                                      "error": "MuiInputLabel-error-107",
                                                                      "filled": "MuiInputLabel-filled-113",
                                                                      "focused": "MuiInputLabel-focused-105",
                                                                      "formControl": "MuiInputLabel-formControl-109",
                                                                      "marginDense": "MuiInputLabel-marginDense-110",
                                                                      "outlined": "MuiInputLabel-outlined-114",
                                                                      "required": "MuiInputLabel-required-108",
                                                                      "root": "MuiInputLabel-root-104",
                                                                      "shrink": "MuiInputLabel-shrink-111",
                                                                    }
                                                                  }
                                                                  disableAnimation={false}
                                                                  muiFormControl={
                                                                    Object {
                                                                      "adornedStart": false,
                                                                      "disabled": false,
                                                                      "error": false,
                                                                      "filled": true,
                                                                      "focused": false,
                                                                      "margin": "none",
                                                                      "onBlur": [Function],
                                                                      "onEmpty": [Function],
                                                                      "onFilled": [Function],
                                                                      "onFocus": [Function],
                                                                      "required": false,
                                                                      "variant": "standard",
                                                                    }
                                                                  }
                                                                >
                                                                  <WithStyles(WithFormControlContext(FormLabel))
                                                                    className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112 MuiInputLabel-shrink-111"
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiInputLabel-disabled-106",
                                                                        "error": "MuiInputLabel-error-107",
                                                                        "focused": "MuiInputLabel-focused-105",
                                                                        "required": "MuiInputLabel-required-108",
                                                                      }
                                                                    }
                                                                    data-shrink={true}
                                                                  >
                                                                    <WithFormControlContext(FormLabel)
                                                                      className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112 MuiInputLabel-shrink-111"
                                                                      classes={
                                                                        Object {
                                                                          "asterisk": "MuiFormLabel-asterisk-121",
                                                                          "disabled": "MuiFormLabel-disabled-117 MuiInputLabel-disabled-106",
                                                                          "error": "MuiFormLabel-error-118 MuiInputLabel-error-107",
                                                                          "filled": "MuiFormLabel-filled-119",
                                                                          "focused": "MuiFormLabel-focused-116 MuiInputLabel-focused-105",
                                                                          "required": "MuiFormLabel-required-120 MuiInputLabel-required-108",
                                                                          "root": "MuiFormLabel-root-115",
                                                                        }
                                                                      }
                                                                      data-shrink={true}
                                                                    >
                                                                      <FormLabel
                                                                        className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112 MuiInputLabel-shrink-111"
                                                                        classes={
                                                                          Object {
                                                                            "asterisk": "MuiFormLabel-asterisk-121",
                                                                            "disabled": "MuiFormLabel-disabled-117 MuiInputLabel-disabled-106",
                                                                            "error": "MuiFormLabel-error-118 MuiInputLabel-error-107",
                                                                            "filled": "MuiFormLabel-filled-119",
                                                                            "focused": "MuiFormLabel-focused-116 MuiInputLabel-focused-105",
                                                                            "required": "MuiFormLabel-required-120 MuiInputLabel-required-108",
                                                                            "root": "MuiFormLabel-root-115",
                                                                          }
                                                                        }
                                                                        component="label"
                                                                        data-shrink={true}
                                                                        muiFormControl={
                                                                          Object {
                                                                            "adornedStart": false,
                                                                            "disabled": false,
                                                                            "error": false,
                                                                            "filled": true,
                                                                            "focused": false,
                                                                            "margin": "none",
                                                                            "onBlur": [Function],
                                                                            "onEmpty": [Function],
                                                                            "onFilled": [Function],
                                                                            "onFocus": [Function],
                                                                            "required": false,
                                                                            "variant": "standard",
                                                                          }
                                                                        }
                                                                      >
                                                                        <label
                                                                          className="MuiFormLabel-root-115 MuiFormLabel-filled-119 MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112 MuiInputLabel-shrink-111"
                                                                          data-shrink={true}
                                                                        >
                                                                          Time From
                                                                        </label>
                                                                      </FormLabel>
                                                                    </WithFormControlContext(FormLabel)>
                                                                  </WithStyles(WithFormControlContext(FormLabel))>
                                                                </InputLabel>
                                                              </WithFormControlContext(InputLabel)>
                                                            </WithStyles(WithFormControlContext(InputLabel))>
                                                            <WithStyles(Input)
                                                              inputComponent={[Function]}
                                                              inputProps={
                                                                Object {
                                                                  "keepCharPositions": undefined,
                                                                  "mask": null,
                                                                  "pipe": null,
                                                                  "readOnly": true,
                                                                }
                                                              }
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              value="11:59 PM"
                                                            >
                                                              <Input
                                                                classes={
                                                                  Object {
                                                                    "disabled": "MuiInput-disabled-125",
                                                                    "error": "MuiInput-error-127",
                                                                    "focused": "MuiInput-focused-124",
                                                                    "formControl": "MuiInput-formControl-123",
                                                                    "fullWidth": "MuiInput-fullWidth-129",
                                                                    "input": "MuiInput-input-130",
                                                                    "inputMarginDense": "MuiInput-inputMarginDense-131",
                                                                    "inputMultiline": "MuiInput-inputMultiline-132",
                                                                    "inputType": "MuiInput-inputType-133",
                                                                    "inputTypeSearch": "MuiInput-inputTypeSearch-134",
                                                                    "multiline": "MuiInput-multiline-128",
                                                                    "root": "MuiInput-root-122",
                                                                    "underline": "MuiInput-underline-126",
                                                                  }
                                                                }
                                                                inputComponent={[Function]}
                                                                inputProps={
                                                                  Object {
                                                                    "keepCharPositions": undefined,
                                                                    "mask": null,
                                                                    "pipe": null,
                                                                    "readOnly": true,
                                                                  }
                                                                }
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                value="11:59 PM"
                                                              >
                                                                <WithStyles(WithFormControlContext(InputBase))
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "MuiInput-disabled-125",
                                                                      "error": "MuiInput-error-127",
                                                                      "focused": "MuiInput-focused-124",
                                                                      "formControl": "MuiInput-formControl-123",
                                                                      "fullWidth": "MuiInput-fullWidth-129",
                                                                      "input": "MuiInput-input-130",
                                                                      "inputMarginDense": "MuiInput-inputMarginDense-131",
                                                                      "inputMultiline": "MuiInput-inputMultiline-132",
                                                                      "inputType": "MuiInput-inputType-133",
                                                                      "inputTypeSearch": "MuiInput-inputTypeSearch-134",
                                                                      "multiline": "MuiInput-multiline-128",
                                                                      "root": "MuiInput-root-122 MuiInput-underline-126",
                                                                      "underline": null,
                                                                    }
                                                                  }
                                                                  fullWidth={false}
                                                                  inputComponent={[Function]}
                                                                  inputProps={
                                                                    Object {
                                                                      "keepCharPositions": undefined,
                                                                      "mask": null,
                                                                      "pipe": null,
                                                                      "readOnly": true,
                                                                    }
                                                                  }
                                                                  multiline={false}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  type="text"
                                                                  value="11:59 PM"
                                                                >
                                                                  <WithFormControlContext(InputBase)
                                                                    classes={
                                                                      Object {
                                                                        "adornedEnd": "MuiInputBase-adornedEnd-140",
                                                                        "adornedStart": "MuiInputBase-adornedStart-139",
                                                                        "disabled": "MuiInputBase-disabled-138 MuiInput-disabled-125",
                                                                        "error": "MuiInputBase-error-141 MuiInput-error-127",
                                                                        "focused": "MuiInputBase-focused-137 MuiInput-focused-124",
                                                                        "formControl": "MuiInputBase-formControl-136 MuiInput-formControl-123",
                                                                        "fullWidth": "MuiInputBase-fullWidth-144 MuiInput-fullWidth-129",
                                                                        "input": "MuiInputBase-input-145 MuiInput-input-130",
                                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-151",
                                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart-150",
                                                                        "inputMarginDense": "MuiInputBase-inputMarginDense-146 MuiInput-inputMarginDense-131",
                                                                        "inputMultiline": "MuiInputBase-inputMultiline-147 MuiInput-inputMultiline-132",
                                                                        "inputType": "MuiInputBase-inputType-148 MuiInput-inputType-133",
                                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch-149 MuiInput-inputTypeSearch-134",
                                                                        "marginDense": "MuiInputBase-marginDense-142",
                                                                        "multiline": "MuiInputBase-multiline-143 MuiInput-multiline-128",
                                                                        "root": "MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126",
                                                                      }
                                                                    }
                                                                    fullWidth={false}
                                                                    inputComponent={[Function]}
                                                                    inputProps={
                                                                      Object {
                                                                        "keepCharPositions": undefined,
                                                                        "mask": null,
                                                                        "pipe": null,
                                                                        "readOnly": true,
                                                                      }
                                                                    }
                                                                    multiline={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    type="text"
                                                                    value="11:59 PM"
                                                                  >
                                                                    <InputBase
                                                                      classes={
                                                                        Object {
                                                                          "adornedEnd": "MuiInputBase-adornedEnd-140",
                                                                          "adornedStart": "MuiInputBase-adornedStart-139",
                                                                          "disabled": "MuiInputBase-disabled-138 MuiInput-disabled-125",
                                                                          "error": "MuiInputBase-error-141 MuiInput-error-127",
                                                                          "focused": "MuiInputBase-focused-137 MuiInput-focused-124",
                                                                          "formControl": "MuiInputBase-formControl-136 MuiInput-formControl-123",
                                                                          "fullWidth": "MuiInputBase-fullWidth-144 MuiInput-fullWidth-129",
                                                                          "input": "MuiInputBase-input-145 MuiInput-input-130",
                                                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-151",
                                                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart-150",
                                                                          "inputMarginDense": "MuiInputBase-inputMarginDense-146 MuiInput-inputMarginDense-131",
                                                                          "inputMultiline": "MuiInputBase-inputMultiline-147 MuiInput-inputMultiline-132",
                                                                          "inputType": "MuiInputBase-inputType-148 MuiInput-inputType-133",
                                                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch-149 MuiInput-inputTypeSearch-134",
                                                                          "marginDense": "MuiInputBase-marginDense-142",
                                                                          "multiline": "MuiInputBase-multiline-143 MuiInput-multiline-128",
                                                                          "root": "MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126",
                                                                        }
                                                                      }
                                                                      fullWidth={false}
                                                                      inputComponent={[Function]}
                                                                      inputProps={
                                                                        Object {
                                                                          "keepCharPositions": undefined,
                                                                          "mask": null,
                                                                          "pipe": null,
                                                                          "readOnly": true,
                                                                        }
                                                                      }
                                                                      muiFormControl={
                                                                        Object {
                                                                          "adornedStart": false,
                                                                          "disabled": false,
                                                                          "error": false,
                                                                          "filled": true,
                                                                          "focused": false,
                                                                          "margin": "none",
                                                                          "onBlur": [Function],
                                                                          "onEmpty": [Function],
                                                                          "onFilled": [Function],
                                                                          "onFocus": [Function],
                                                                          "required": false,
                                                                          "variant": "standard",
                                                                        }
                                                                      }
                                                                      multiline={false}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value="11:59 PM"
                                                                    >
                                                                      <div
                                                                        className="MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126 MuiInputBase-formControl-136 MuiInput-formControl-123"
                                                                        onClick={[Function]}
                                                                      >
                                                                        <Input
                                                                          aria-invalid={false}
                                                                          className="MuiInputBase-input-145 MuiInput-input-130"
                                                                          disabled={false}
                                                                          inputRef={[Function]}
                                                                          mask={null}
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          pipe={null}
                                                                          readOnly={true}
                                                                          required={false}
                                                                          type="text"
                                                                          value="11:59 PM"
                                                                        >
                                                                          <input
                                                                            aria-invalid={false}
                                                                            className="MuiInputBase-input-145 MuiInput-input-130"
                                                                            disabled={false}
                                                                            mask={null}
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            pipe={null}
                                                                            readOnly={true}
                                                                            required={false}
                                                                            type="text"
                                                                            value="11:59 PM"
                                                                          />
                                                                        </Input>
                                                                      </div>
                                                                    </InputBase>
                                                                  </WithFormControlContext(InputBase)>
                                                                </WithStyles(WithFormControlContext(InputBase))>
                                                              </Input>
                                                            </WithStyles(Input)>
                                                          </div>
                                                        </FormControl>
                                                      </WithStyles(FormControl)>
                                                    </TextField>
                                                  </DateTextField>
                                                </WithUtils(DateTextField)>
                                                <WithStyles(Popover)
                                                  anchorEl={null}
                                                  anchorOrigin={
                                                    Object {
                                                      "horizontal": "center",
                                                      "vertical": "bottom",
                                                    }
                                                  }
                                                  classes={
                                                    Object {
                                                      "paper": "InlineWrapper-popoverPaper-98",
                                                    }
                                                  }
                                                  id="picker-popover"
                                                  onClose={[Function]}
                                                  open={false}
                                                  transformOrigin={
                                                    Object {
                                                      "horizontal": "center",
                                                      "vertical": "top",
                                                    }
                                                  }
                                                >
                                                  <Popover
                                                    TransitionComponent={[Function]}
                                                    anchorEl={null}
                                                    anchorOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "bottom",
                                                      }
                                                    }
                                                    anchorReference="anchorEl"
                                                    classes={
                                                      Object {
                                                        "paper": "MuiPopover-paper-152 InlineWrapper-popoverPaper-98",
                                                      }
                                                    }
                                                    elevation={8}
                                                    id="picker-popover"
                                                    marginThreshold={16}
                                                    onClose={[Function]}
                                                    open={false}
                                                    transformOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                    transitionDuration="auto"
                                                  >
                                                    <WithStyles(Modal)
                                                      BackdropProps={
                                                        Object {
                                                          "invisible": true,
                                                        }
                                                      }
                                                      id="picker-popover"
                                                      onClose={[Function]}
                                                      open={false}
                                                    >
                                                      <Modal
                                                        BackdropComponent={[Function]}
                                                        BackdropProps={
                                                          Object {
                                                            "invisible": true,
                                                          }
                                                        }
                                                        classes={
                                                          Object {
                                                            "hidden": "MuiModal-hidden-154",
                                                            "root": "MuiModal-root-153",
                                                          }
                                                        }
                                                        closeAfterTransition={false}
                                                        disableAutoFocus={false}
                                                        disableBackdropClick={false}
                                                        disableEnforceFocus={false}
                                                        disableEscapeKeyDown={false}
                                                        disablePortal={false}
                                                        disableRestoreFocus={false}
                                                        hideBackdrop={false}
                                                        id="picker-popover"
                                                        keepMounted={false}
                                                        manager={
                                                          ModalManager {
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "modals": Array [],
                                                          }
                                                        }
                                                        onClose={[Function]}
                                                        open={false}
                                                      />
                                                    </WithStyles(Modal)>
                                                  </Popover>
                                                </WithStyles(Popover)>
                                              </InlineWrapper>
                                            </WithStyles(InlineWrapper)>
                                          </BasePicker>
                                        </WithUtils(BasePicker)>
                                      </TimePickerInline>
                                    </ForwardRef>
                                  </div>
                                </Styled(div)>
                                <Styled(div)>
                                  <div
                                    className="css-1fijtdw"
                                  >
                                    <ForwardRef
                                      className="date-to-datepicker"
                                      format="LL, (dddd)"
                                      label="Date To"
                                      onChange={[Function]}
                                      value={null}
                                    >
                                      <DatePickerInline
                                        className="date-to-datepicker"
                                        format="LL, (dddd)"
                                        forwardedRef={null}
                                        label="Date To"
                                        onChange={[Function]}
                                        value={null}
                                        views={
                                          Array [
                                            "year",
                                            "day",
                                          ]
                                        }
                                      >
                                        <WithUtils(BasePicker)
                                          autoOk={true}
                                          className="date-to-datepicker"
                                          format="LL, (dddd)"
                                          forwardedRef={null}
                                          label="Date To"
                                          onChange={[Function]}
                                          value={null}
                                          views={
                                            Array [
                                              "year",
                                              "day",
                                            ]
                                          }
                                        >
                                          <BasePicker
                                            ampm={true}
                                            autoOK={false}
                                            autoOk={true}
                                            className="date-to-datepicker"
                                            format="LL, (dddd)"
                                            forwardedRef={null}
                                            label="Date To"
                                            onChange={[Function]}
                                            utils={
                                              MomentUtils {
                                                "dateFormat": "MMMM Do",
                                                "dateTime12hFormat": "MMMM Do hh:mm a",
                                                "dateTime24hFormat": "MMMM Do HH:mm",
                                                "locale": undefined,
                                                "moment": [Function],
                                                "time12hFormat": "hh:mm A",
                                                "time24hFormat": "HH:mm",
                                                "yearFormat": "YYYY",
                                                "yearMonthFormat": "MMMM YYYY",
                                              }
                                            }
                                            value={null}
                                            views={
                                              Array [
                                                "year",
                                                "day",
                                              ]
                                            }
                                          >
                                            <WithStyles(InlineWrapper)
                                              className="date-to-datepicker"
                                              format="LL, (dddd)"
                                              handleAccept={[Function]}
                                              innerRef={null}
                                              isAccepted={false}
                                              label="Date To"
                                              onChange={[Function]}
                                              onClear={[Function]}
                                              value={null}
                                            >
                                              <InlineWrapper
                                                className="date-to-datepicker"
                                                classes={
                                                  Object {
                                                    "popoverPaper": "InlineWrapper-popoverPaper-98",
                                                    "popoverPaperWider": "InlineWrapper-popoverPaperWider-99",
                                                  }
                                                }
                                                format="LL, (dddd)"
                                                handleAccept={[Function]}
                                                isAccepted={false}
                                                label="Date To"
                                                onChange={[Function]}
                                                onClear={[Function]}
                                                onlyCalendar={false}
                                                value={null}
                                              >
                                                <WithUtils(DateTextField)
                                                  className="date-to-datepicker"
                                                  format="LL, (dddd)"
                                                  label="Date To"
                                                  onChange={[Function]}
                                                  onClear={[Function]}
                                                  onClick={[Function]}
                                                  value={null}
                                                >
                                                  <DateTextField
                                                    InputAdornmentProps={Object {}}
                                                    KeyboardButtonProps={Object {}}
                                                    TextFieldComponent={[Function]}
                                                    adornmentPosition="end"
                                                    className="date-to-datepicker"
                                                    clearable={false}
                                                    disableFuture={false}
                                                    disableOpenOnEnter={false}
                                                    disablePast={false}
                                                    disabled={false}
                                                    emptyLabel=""
                                                    format="LL, (dddd)"
                                                    invalidDateMessage="Invalid Date Format"
                                                    invalidLabel="Unknown"
                                                    keepCharPositions={false}
                                                    keyboard={false}
                                                    keyboardIcon={<KeyboardIcon />}
                                                    label="Date To"
                                                    maxDate={2100-01-01T00:00:00.000Z}
                                                    maxDateMessage="Date should not be after maximal date"
                                                    minDate={1900-01-01T00:00:00.000Z}
                                                    minDateMessage="Date should not be before minimal date"
                                                    onChange={[Function]}
                                                    onClear={[Function]}
                                                    onClick={[Function]}
                                                    utils={
                                                      MomentUtils {
                                                        "dateFormat": "MMMM Do",
                                                        "dateTime12hFormat": "MMMM Do hh:mm a",
                                                        "dateTime24hFormat": "MMMM Do HH:mm",
                                                        "locale": undefined,
                                                        "moment": [Function],
                                                        "time12hFormat": "hh:mm A",
                                                        "time24hFormat": "HH:mm",
                                                        "yearFormat": "YYYY",
                                                        "yearMonthFormat": "MMMM YYYY",
                                                      }
                                                    }
                                                    value={null}
                                                  >
                                                    <TextField
                                                      InputProps={
                                                        Object {
                                                          "inputComponent": [Function],
                                                          "inputProps": Object {
                                                            "keepCharPositions": undefined,
                                                            "mask": null,
                                                            "pipe": null,
                                                            "readOnly": true,
                                                          },
                                                        }
                                                      }
                                                      className="date-to-datepicker"
                                                      disabled={false}
                                                      error={false}
                                                      helperText=""
                                                      label="Date To"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      required={false}
                                                      select={false}
                                                      value=""
                                                      variant="standard"
                                                    >
                                                      <WithStyles(FormControl)
                                                        className="date-to-datepicker"
                                                        disabled={false}
                                                        error={false}
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        required={false}
                                                        variant="standard"
                                                      >
                                                        <FormControl
                                                          className="date-to-datepicker"
                                                          classes={
                                                            Object {
                                                              "fullWidth": "MuiFormControl-fullWidth-103",
                                                              "marginDense": "MuiFormControl-marginDense-102",
                                                              "marginNormal": "MuiFormControl-marginNormal-101",
                                                              "root": "MuiFormControl-root-100",
                                                            }
                                                          }
                                                          component="div"
                                                          disabled={false}
                                                          error={false}
                                                          fullWidth={false}
                                                          margin="none"
                                                          onClick={[Function]}
                                                          onKeyPress={[Function]}
                                                          required={false}
                                                          variant="standard"
                                                        >
                                                          <div
                                                            className="MuiFormControl-root-100 date-to-datepicker"
                                                            onClick={[Function]}
                                                            onKeyPress={[Function]}
                                                          >
                                                            <WithStyles(WithFormControlContext(InputLabel))>
                                                              <WithFormControlContext(InputLabel)
                                                                classes={
                                                                  Object {
                                                                    "animated": "MuiInputLabel-animated-112",
                                                                    "disabled": "MuiInputLabel-disabled-106",
                                                                    "error": "MuiInputLabel-error-107",
                                                                    "filled": "MuiInputLabel-filled-113",
                                                                    "focused": "MuiInputLabel-focused-105",
                                                                    "formControl": "MuiInputLabel-formControl-109",
                                                                    "marginDense": "MuiInputLabel-marginDense-110",
                                                                    "outlined": "MuiInputLabel-outlined-114",
                                                                    "required": "MuiInputLabel-required-108",
                                                                    "root": "MuiInputLabel-root-104",
                                                                    "shrink": "MuiInputLabel-shrink-111",
                                                                  }
                                                                }
                                                              >
                                                                <InputLabel
                                                                  classes={
                                                                    Object {
                                                                      "animated": "MuiInputLabel-animated-112",
                                                                      "disabled": "MuiInputLabel-disabled-106",
                                                                      "error": "MuiInputLabel-error-107",
                                                                      "filled": "MuiInputLabel-filled-113",
                                                                      "focused": "MuiInputLabel-focused-105",
                                                                      "formControl": "MuiInputLabel-formControl-109",
                                                                      "marginDense": "MuiInputLabel-marginDense-110",
                                                                      "outlined": "MuiInputLabel-outlined-114",
                                                                      "required": "MuiInputLabel-required-108",
                                                                      "root": "MuiInputLabel-root-104",
                                                                      "shrink": "MuiInputLabel-shrink-111",
                                                                    }
                                                                  }
                                                                  disableAnimation={false}
                                                                  muiFormControl={
                                                                    Object {
                                                                      "adornedStart": false,
                                                                      "disabled": false,
                                                                      "error": false,
                                                                      "filled": false,
                                                                      "focused": false,
                                                                      "margin": "none",
                                                                      "onBlur": [Function],
                                                                      "onEmpty": [Function],
                                                                      "onFilled": [Function],
                                                                      "onFocus": [Function],
                                                                      "required": false,
                                                                      "variant": "standard",
                                                                    }
                                                                  }
                                                                >
                                                                  <WithStyles(WithFormControlContext(FormLabel))
                                                                    className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112"
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiInputLabel-disabled-106",
                                                                        "error": "MuiInputLabel-error-107",
                                                                        "focused": "MuiInputLabel-focused-105",
                                                                        "required": "MuiInputLabel-required-108",
                                                                      }
                                                                    }
                                                                    data-shrink={false}
                                                                  >
                                                                    <WithFormControlContext(FormLabel)
                                                                      className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112"
                                                                      classes={
                                                                        Object {
                                                                          "asterisk": "MuiFormLabel-asterisk-121",
                                                                          "disabled": "MuiFormLabel-disabled-117 MuiInputLabel-disabled-106",
                                                                          "error": "MuiFormLabel-error-118 MuiInputLabel-error-107",
                                                                          "filled": "MuiFormLabel-filled-119",
                                                                          "focused": "MuiFormLabel-focused-116 MuiInputLabel-focused-105",
                                                                          "required": "MuiFormLabel-required-120 MuiInputLabel-required-108",
                                                                          "root": "MuiFormLabel-root-115",
                                                                        }
                                                                      }
                                                                      data-shrink={false}
                                                                    >
                                                                      <FormLabel
                                                                        className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112"
                                                                        classes={
                                                                          Object {
                                                                            "asterisk": "MuiFormLabel-asterisk-121",
                                                                            "disabled": "MuiFormLabel-disabled-117 MuiInputLabel-disabled-106",
                                                                            "error": "MuiFormLabel-error-118 MuiInputLabel-error-107",
                                                                            "filled": "MuiFormLabel-filled-119",
                                                                            "focused": "MuiFormLabel-focused-116 MuiInputLabel-focused-105",
                                                                            "required": "MuiFormLabel-required-120 MuiInputLabel-required-108",
                                                                            "root": "MuiFormLabel-root-115",
                                                                          }
                                                                        }
                                                                        component="label"
                                                                        data-shrink={false}
                                                                        muiFormControl={
                                                                          Object {
                                                                            "adornedStart": false,
                                                                            "disabled": false,
                                                                            "error": false,
                                                                            "filled": false,
                                                                            "focused": false,
                                                                            "margin": "none",
                                                                            "onBlur": [Function],
                                                                            "onEmpty": [Function],
                                                                            "onFilled": [Function],
                                                                            "onFocus": [Function],
                                                                            "required": false,
                                                                            "variant": "standard",
                                                                          }
                                                                        }
                                                                      >
                                                                        <label
                                                                          className="MuiFormLabel-root-115 MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112"
                                                                          data-shrink={false}
                                                                        >
                                                                          Date To
                                                                        </label>
                                                                      </FormLabel>
                                                                    </WithFormControlContext(FormLabel)>
                                                                  </WithStyles(WithFormControlContext(FormLabel))>
                                                                </InputLabel>
                                                              </WithFormControlContext(InputLabel)>
                                                            </WithStyles(WithFormControlContext(InputLabel))>
                                                            <WithStyles(Input)
                                                              inputComponent={[Function]}
                                                              inputProps={
                                                                Object {
                                                                  "keepCharPositions": undefined,
                                                                  "mask": null,
                                                                  "pipe": null,
                                                                  "readOnly": true,
                                                                }
                                                              }
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              value=""
                                                            >
                                                              <Input
                                                                classes={
                                                                  Object {
                                                                    "disabled": "MuiInput-disabled-125",
                                                                    "error": "MuiInput-error-127",
                                                                    "focused": "MuiInput-focused-124",
                                                                    "formControl": "MuiInput-formControl-123",
                                                                    "fullWidth": "MuiInput-fullWidth-129",
                                                                    "input": "MuiInput-input-130",
                                                                    "inputMarginDense": "MuiInput-inputMarginDense-131",
                                                                    "inputMultiline": "MuiInput-inputMultiline-132",
                                                                    "inputType": "MuiInput-inputType-133",
                                                                    "inputTypeSearch": "MuiInput-inputTypeSearch-134",
                                                                    "multiline": "MuiInput-multiline-128",
                                                                    "root": "MuiInput-root-122",
                                                                    "underline": "MuiInput-underline-126",
                                                                  }
                                                                }
                                                                inputComponent={[Function]}
                                                                inputProps={
                                                                  Object {
                                                                    "keepCharPositions": undefined,
                                                                    "mask": null,
                                                                    "pipe": null,
                                                                    "readOnly": true,
                                                                  }
                                                                }
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                value=""
                                                              >
                                                                <WithStyles(WithFormControlContext(InputBase))
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "MuiInput-disabled-125",
                                                                      "error": "MuiInput-error-127",
                                                                      "focused": "MuiInput-focused-124",
                                                                      "formControl": "MuiInput-formControl-123",
                                                                      "fullWidth": "MuiInput-fullWidth-129",
                                                                      "input": "MuiInput-input-130",
                                                                      "inputMarginDense": "MuiInput-inputMarginDense-131",
                                                                      "inputMultiline": "MuiInput-inputMultiline-132",
                                                                      "inputType": "MuiInput-inputType-133",
                                                                      "inputTypeSearch": "MuiInput-inputTypeSearch-134",
                                                                      "multiline": "MuiInput-multiline-128",
                                                                      "root": "MuiInput-root-122 MuiInput-underline-126",
                                                                      "underline": null,
                                                                    }
                                                                  }
                                                                  fullWidth={false}
                                                                  inputComponent={[Function]}
                                                                  inputProps={
                                                                    Object {
                                                                      "keepCharPositions": undefined,
                                                                      "mask": null,
                                                                      "pipe": null,
                                                                      "readOnly": true,
                                                                    }
                                                                  }
                                                                  multiline={false}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  type="text"
                                                                  value=""
                                                                >
                                                                  <WithFormControlContext(InputBase)
                                                                    classes={
                                                                      Object {
                                                                        "adornedEnd": "MuiInputBase-adornedEnd-140",
                                                                        "adornedStart": "MuiInputBase-adornedStart-139",
                                                                        "disabled": "MuiInputBase-disabled-138 MuiInput-disabled-125",
                                                                        "error": "MuiInputBase-error-141 MuiInput-error-127",
                                                                        "focused": "MuiInputBase-focused-137 MuiInput-focused-124",
                                                                        "formControl": "MuiInputBase-formControl-136 MuiInput-formControl-123",
                                                                        "fullWidth": "MuiInputBase-fullWidth-144 MuiInput-fullWidth-129",
                                                                        "input": "MuiInputBase-input-145 MuiInput-input-130",
                                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-151",
                                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart-150",
                                                                        "inputMarginDense": "MuiInputBase-inputMarginDense-146 MuiInput-inputMarginDense-131",
                                                                        "inputMultiline": "MuiInputBase-inputMultiline-147 MuiInput-inputMultiline-132",
                                                                        "inputType": "MuiInputBase-inputType-148 MuiInput-inputType-133",
                                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch-149 MuiInput-inputTypeSearch-134",
                                                                        "marginDense": "MuiInputBase-marginDense-142",
                                                                        "multiline": "MuiInputBase-multiline-143 MuiInput-multiline-128",
                                                                        "root": "MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126",
                                                                      }
                                                                    }
                                                                    fullWidth={false}
                                                                    inputComponent={[Function]}
                                                                    inputProps={
                                                                      Object {
                                                                        "keepCharPositions": undefined,
                                                                        "mask": null,
                                                                        "pipe": null,
                                                                        "readOnly": true,
                                                                      }
                                                                    }
                                                                    multiline={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    type="text"
                                                                    value=""
                                                                  >
                                                                    <InputBase
                                                                      classes={
                                                                        Object {
                                                                          "adornedEnd": "MuiInputBase-adornedEnd-140",
                                                                          "adornedStart": "MuiInputBase-adornedStart-139",
                                                                          "disabled": "MuiInputBase-disabled-138 MuiInput-disabled-125",
                                                                          "error": "MuiInputBase-error-141 MuiInput-error-127",
                                                                          "focused": "MuiInputBase-focused-137 MuiInput-focused-124",
                                                                          "formControl": "MuiInputBase-formControl-136 MuiInput-formControl-123",
                                                                          "fullWidth": "MuiInputBase-fullWidth-144 MuiInput-fullWidth-129",
                                                                          "input": "MuiInputBase-input-145 MuiInput-input-130",
                                                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-151",
                                                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart-150",
                                                                          "inputMarginDense": "MuiInputBase-inputMarginDense-146 MuiInput-inputMarginDense-131",
                                                                          "inputMultiline": "MuiInputBase-inputMultiline-147 MuiInput-inputMultiline-132",
                                                                          "inputType": "MuiInputBase-inputType-148 MuiInput-inputType-133",
                                                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch-149 MuiInput-inputTypeSearch-134",
                                                                          "marginDense": "MuiInputBase-marginDense-142",
                                                                          "multiline": "MuiInputBase-multiline-143 MuiInput-multiline-128",
                                                                          "root": "MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126",
                                                                        }
                                                                      }
                                                                      fullWidth={false}
                                                                      inputComponent={[Function]}
                                                                      inputProps={
                                                                        Object {
                                                                          "keepCharPositions": undefined,
                                                                          "mask": null,
                                                                          "pipe": null,
                                                                          "readOnly": true,
                                                                        }
                                                                      }
                                                                      muiFormControl={
                                                                        Object {
                                                                          "adornedStart": false,
                                                                          "disabled": false,
                                                                          "error": false,
                                                                          "filled": false,
                                                                          "focused": false,
                                                                          "margin": "none",
                                                                          "onBlur": [Function],
                                                                          "onEmpty": [Function],
                                                                          "onFilled": [Function],
                                                                          "onFocus": [Function],
                                                                          "required": false,
                                                                          "variant": "standard",
                                                                        }
                                                                      }
                                                                      multiline={false}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <div
                                                                        className="MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126 MuiInputBase-formControl-136 MuiInput-formControl-123"
                                                                        onClick={[Function]}
                                                                      >
                                                                        <Input
                                                                          aria-invalid={false}
                                                                          className="MuiInputBase-input-145 MuiInput-input-130"
                                                                          disabled={false}
                                                                          inputRef={[Function]}
                                                                          mask={null}
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          pipe={null}
                                                                          readOnly={true}
                                                                          required={false}
                                                                          type="text"
                                                                          value=""
                                                                        >
                                                                          <input
                                                                            aria-invalid={false}
                                                                            className="MuiInputBase-input-145 MuiInput-input-130"
                                                                            disabled={false}
                                                                            mask={null}
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            pipe={null}
                                                                            readOnly={true}
                                                                            required={false}
                                                                            type="text"
                                                                            value=""
                                                                          />
                                                                        </Input>
                                                                      </div>
                                                                    </InputBase>
                                                                  </WithFormControlContext(InputBase)>
                                                                </WithStyles(WithFormControlContext(InputBase))>
                                                              </Input>
                                                            </WithStyles(Input)>
                                                          </div>
                                                        </FormControl>
                                                      </WithStyles(FormControl)>
                                                    </TextField>
                                                  </DateTextField>
                                                </WithUtils(DateTextField)>
                                                <WithStyles(Popover)
                                                  anchorEl={null}
                                                  anchorOrigin={
                                                    Object {
                                                      "horizontal": "center",
                                                      "vertical": "bottom",
                                                    }
                                                  }
                                                  classes={
                                                    Object {
                                                      "paper": "InlineWrapper-popoverPaper-98",
                                                    }
                                                  }
                                                  id="picker-popover"
                                                  onClose={[Function]}
                                                  open={false}
                                                  transformOrigin={
                                                    Object {
                                                      "horizontal": "center",
                                                      "vertical": "top",
                                                    }
                                                  }
                                                >
                                                  <Popover
                                                    TransitionComponent={[Function]}
                                                    anchorEl={null}
                                                    anchorOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "bottom",
                                                      }
                                                    }
                                                    anchorReference="anchorEl"
                                                    classes={
                                                      Object {
                                                        "paper": "MuiPopover-paper-152 InlineWrapper-popoverPaper-98",
                                                      }
                                                    }
                                                    elevation={8}
                                                    id="picker-popover"
                                                    marginThreshold={16}
                                                    onClose={[Function]}
                                                    open={false}
                                                    transformOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                    transitionDuration="auto"
                                                  >
                                                    <WithStyles(Modal)
                                                      BackdropProps={
                                                        Object {
                                                          "invisible": true,
                                                        }
                                                      }
                                                      id="picker-popover"
                                                      onClose={[Function]}
                                                      open={false}
                                                    >
                                                      <Modal
                                                        BackdropComponent={[Function]}
                                                        BackdropProps={
                                                          Object {
                                                            "invisible": true,
                                                          }
                                                        }
                                                        classes={
                                                          Object {
                                                            "hidden": "MuiModal-hidden-154",
                                                            "root": "MuiModal-root-153",
                                                          }
                                                        }
                                                        closeAfterTransition={false}
                                                        disableAutoFocus={false}
                                                        disableBackdropClick={false}
                                                        disableEnforceFocus={false}
                                                        disableEscapeKeyDown={false}
                                                        disablePortal={false}
                                                        disableRestoreFocus={false}
                                                        hideBackdrop={false}
                                                        id="picker-popover"
                                                        keepMounted={false}
                                                        manager={
                                                          ModalManager {
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "modals": Array [],
                                                          }
                                                        }
                                                        onClose={[Function]}
                                                        open={false}
                                                      />
                                                    </WithStyles(Modal)>
                                                  </Popover>
                                                </WithStyles(Popover)>
                                              </InlineWrapper>
                                            </WithStyles(InlineWrapper)>
                                          </BasePicker>
                                        </WithUtils(BasePicker)>
                                      </DatePickerInline>
                                    </ForwardRef>
                                    <ForwardRef
                                      className="date-to-timepicker"
                                      label="Time To"
                                      minutesStep={15}
                                      onChange={[Function]}
                                      value={null}
                                    >
                                      <TimePickerInline
                                        className="date-to-timepicker"
                                        forwardedRef={null}
                                        label="Time To"
                                        minutesStep={15}
                                        onChange={[Function]}
                                        value={null}
                                      >
                                        <WithUtils(BasePicker)
                                          autoOk={true}
                                          className="date-to-timepicker"
                                          forwardedRef={null}
                                          label="Time To"
                                          mergePreviousDateOnChange={true}
                                          minutesStep={15}
                                          onChange={[Function]}
                                          value={null}
                                        >
                                          <BasePicker
                                            ampm={true}
                                            autoOK={false}
                                            autoOk={true}
                                            className="date-to-timepicker"
                                            forwardedRef={null}
                                            label="Time To"
                                            mergePreviousDateOnChange={true}
                                            minutesStep={15}
                                            onChange={[Function]}
                                            utils={
                                              MomentUtils {
                                                "dateFormat": "MMMM Do",
                                                "dateTime12hFormat": "MMMM Do hh:mm a",
                                                "dateTime24hFormat": "MMMM Do HH:mm",
                                                "locale": undefined,
                                                "moment": [Function],
                                                "time12hFormat": "hh:mm A",
                                                "time24hFormat": "HH:mm",
                                                "yearFormat": "YYYY",
                                                "yearMonthFormat": "MMMM YYYY",
                                              }
                                            }
                                            value={null}
                                          >
                                            <WithStyles(InlineWrapper)
                                              className="date-to-timepicker"
                                              format="hh:mm A"
                                              handleAccept={[Function]}
                                              innerRef={null}
                                              isAccepted={false}
                                              label="Time To"
                                              onChange={[Function]}
                                              onClear={[Function]}
                                              value={null}
                                            >
                                              <InlineWrapper
                                                className="date-to-timepicker"
                                                classes={
                                                  Object {
                                                    "popoverPaper": "InlineWrapper-popoverPaper-98",
                                                    "popoverPaperWider": "InlineWrapper-popoverPaperWider-99",
                                                  }
                                                }
                                                format="hh:mm A"
                                                handleAccept={[Function]}
                                                isAccepted={false}
                                                label="Time To"
                                                onChange={[Function]}
                                                onClear={[Function]}
                                                onlyCalendar={false}
                                                value={null}
                                              >
                                                <WithUtils(DateTextField)
                                                  className="date-to-timepicker"
                                                  format="hh:mm A"
                                                  label="Time To"
                                                  onChange={[Function]}
                                                  onClear={[Function]}
                                                  onClick={[Function]}
                                                  value={null}
                                                >
                                                  <DateTextField
                                                    InputAdornmentProps={Object {}}
                                                    KeyboardButtonProps={Object {}}
                                                    TextFieldComponent={[Function]}
                                                    adornmentPosition="end"
                                                    className="date-to-timepicker"
                                                    clearable={false}
                                                    disableFuture={false}
                                                    disableOpenOnEnter={false}
                                                    disablePast={false}
                                                    disabled={false}
                                                    emptyLabel=""
                                                    format="hh:mm A"
                                                    invalidDateMessage="Invalid Date Format"
                                                    invalidLabel="Unknown"
                                                    keepCharPositions={false}
                                                    keyboard={false}
                                                    keyboardIcon={<KeyboardIcon />}
                                                    label="Time To"
                                                    maxDate={2100-01-01T00:00:00.000Z}
                                                    maxDateMessage="Date should not be after maximal date"
                                                    minDate={1900-01-01T00:00:00.000Z}
                                                    minDateMessage="Date should not be before minimal date"
                                                    onChange={[Function]}
                                                    onClear={[Function]}
                                                    onClick={[Function]}
                                                    utils={
                                                      MomentUtils {
                                                        "dateFormat": "MMMM Do",
                                                        "dateTime12hFormat": "MMMM Do hh:mm a",
                                                        "dateTime24hFormat": "MMMM Do HH:mm",
                                                        "locale": undefined,
                                                        "moment": [Function],
                                                        "time12hFormat": "hh:mm A",
                                                        "time24hFormat": "HH:mm",
                                                        "yearFormat": "YYYY",
                                                        "yearMonthFormat": "MMMM YYYY",
                                                      }
                                                    }
                                                    value={null}
                                                  >
                                                    <TextField
                                                      InputProps={
                                                        Object {
                                                          "inputComponent": [Function],
                                                          "inputProps": Object {
                                                            "keepCharPositions": undefined,
                                                            "mask": null,
                                                            "pipe": null,
                                                            "readOnly": true,
                                                          },
                                                        }
                                                      }
                                                      className="date-to-timepicker"
                                                      disabled={false}
                                                      error={false}
                                                      helperText=""
                                                      label="Time To"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      required={false}
                                                      select={false}
                                                      value=""
                                                      variant="standard"
                                                    >
                                                      <WithStyles(FormControl)
                                                        className="date-to-timepicker"
                                                        disabled={false}
                                                        error={false}
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        required={false}
                                                        variant="standard"
                                                      >
                                                        <FormControl
                                                          className="date-to-timepicker"
                                                          classes={
                                                            Object {
                                                              "fullWidth": "MuiFormControl-fullWidth-103",
                                                              "marginDense": "MuiFormControl-marginDense-102",
                                                              "marginNormal": "MuiFormControl-marginNormal-101",
                                                              "root": "MuiFormControl-root-100",
                                                            }
                                                          }
                                                          component="div"
                                                          disabled={false}
                                                          error={false}
                                                          fullWidth={false}
                                                          margin="none"
                                                          onClick={[Function]}
                                                          onKeyPress={[Function]}
                                                          required={false}
                                                          variant="standard"
                                                        >
                                                          <div
                                                            className="MuiFormControl-root-100 date-to-timepicker"
                                                            onClick={[Function]}
                                                            onKeyPress={[Function]}
                                                          >
                                                            <WithStyles(WithFormControlContext(InputLabel))>
                                                              <WithFormControlContext(InputLabel)
                                                                classes={
                                                                  Object {
                                                                    "animated": "MuiInputLabel-animated-112",
                                                                    "disabled": "MuiInputLabel-disabled-106",
                                                                    "error": "MuiInputLabel-error-107",
                                                                    "filled": "MuiInputLabel-filled-113",
                                                                    "focused": "MuiInputLabel-focused-105",
                                                                    "formControl": "MuiInputLabel-formControl-109",
                                                                    "marginDense": "MuiInputLabel-marginDense-110",
                                                                    "outlined": "MuiInputLabel-outlined-114",
                                                                    "required": "MuiInputLabel-required-108",
                                                                    "root": "MuiInputLabel-root-104",
                                                                    "shrink": "MuiInputLabel-shrink-111",
                                                                  }
                                                                }
                                                              >
                                                                <InputLabel
                                                                  classes={
                                                                    Object {
                                                                      "animated": "MuiInputLabel-animated-112",
                                                                      "disabled": "MuiInputLabel-disabled-106",
                                                                      "error": "MuiInputLabel-error-107",
                                                                      "filled": "MuiInputLabel-filled-113",
                                                                      "focused": "MuiInputLabel-focused-105",
                                                                      "formControl": "MuiInputLabel-formControl-109",
                                                                      "marginDense": "MuiInputLabel-marginDense-110",
                                                                      "outlined": "MuiInputLabel-outlined-114",
                                                                      "required": "MuiInputLabel-required-108",
                                                                      "root": "MuiInputLabel-root-104",
                                                                      "shrink": "MuiInputLabel-shrink-111",
                                                                    }
                                                                  }
                                                                  disableAnimation={false}
                                                                  muiFormControl={
                                                                    Object {
                                                                      "adornedStart": false,
                                                                      "disabled": false,
                                                                      "error": false,
                                                                      "filled": false,
                                                                      "focused": false,
                                                                      "margin": "none",
                                                                      "onBlur": [Function],
                                                                      "onEmpty": [Function],
                                                                      "onFilled": [Function],
                                                                      "onFocus": [Function],
                                                                      "required": false,
                                                                      "variant": "standard",
                                                                    }
                                                                  }
                                                                >
                                                                  <WithStyles(WithFormControlContext(FormLabel))
                                                                    className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112"
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiInputLabel-disabled-106",
                                                                        "error": "MuiInputLabel-error-107",
                                                                        "focused": "MuiInputLabel-focused-105",
                                                                        "required": "MuiInputLabel-required-108",
                                                                      }
                                                                    }
                                                                    data-shrink={false}
                                                                  >
                                                                    <WithFormControlContext(FormLabel)
                                                                      className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112"
                                                                      classes={
                                                                        Object {
                                                                          "asterisk": "MuiFormLabel-asterisk-121",
                                                                          "disabled": "MuiFormLabel-disabled-117 MuiInputLabel-disabled-106",
                                                                          "error": "MuiFormLabel-error-118 MuiInputLabel-error-107",
                                                                          "filled": "MuiFormLabel-filled-119",
                                                                          "focused": "MuiFormLabel-focused-116 MuiInputLabel-focused-105",
                                                                          "required": "MuiFormLabel-required-120 MuiInputLabel-required-108",
                                                                          "root": "MuiFormLabel-root-115",
                                                                        }
                                                                      }
                                                                      data-shrink={false}
                                                                    >
                                                                      <FormLabel
                                                                        className="MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112"
                                                                        classes={
                                                                          Object {
                                                                            "asterisk": "MuiFormLabel-asterisk-121",
                                                                            "disabled": "MuiFormLabel-disabled-117 MuiInputLabel-disabled-106",
                                                                            "error": "MuiFormLabel-error-118 MuiInputLabel-error-107",
                                                                            "filled": "MuiFormLabel-filled-119",
                                                                            "focused": "MuiFormLabel-focused-116 MuiInputLabel-focused-105",
                                                                            "required": "MuiFormLabel-required-120 MuiInputLabel-required-108",
                                                                            "root": "MuiFormLabel-root-115",
                                                                          }
                                                                        }
                                                                        component="label"
                                                                        data-shrink={false}
                                                                        muiFormControl={
                                                                          Object {
                                                                            "adornedStart": false,
                                                                            "disabled": false,
                                                                            "error": false,
                                                                            "filled": false,
                                                                            "focused": false,
                                                                            "margin": "none",
                                                                            "onBlur": [Function],
                                                                            "onEmpty": [Function],
                                                                            "onFilled": [Function],
                                                                            "onFocus": [Function],
                                                                            "required": false,
                                                                            "variant": "standard",
                                                                          }
                                                                        }
                                                                      >
                                                                        <label
                                                                          className="MuiFormLabel-root-115 MuiInputLabel-root-104 MuiInputLabel-formControl-109 MuiInputLabel-animated-112"
                                                                          data-shrink={false}
                                                                        >
                                                                          Time To
                                                                        </label>
                                                                      </FormLabel>
                                                                    </WithFormControlContext(FormLabel)>
                                                                  </WithStyles(WithFormControlContext(FormLabel))>
                                                                </InputLabel>
                                                              </WithFormControlContext(InputLabel)>
                                                            </WithStyles(WithFormControlContext(InputLabel))>
                                                            <WithStyles(Input)
                                                              inputComponent={[Function]}
                                                              inputProps={
                                                                Object {
                                                                  "keepCharPositions": undefined,
                                                                  "mask": null,
                                                                  "pipe": null,
                                                                  "readOnly": true,
                                                                }
                                                              }
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              value=""
                                                            >
                                                              <Input
                                                                classes={
                                                                  Object {
                                                                    "disabled": "MuiInput-disabled-125",
                                                                    "error": "MuiInput-error-127",
                                                                    "focused": "MuiInput-focused-124",
                                                                    "formControl": "MuiInput-formControl-123",
                                                                    "fullWidth": "MuiInput-fullWidth-129",
                                                                    "input": "MuiInput-input-130",
                                                                    "inputMarginDense": "MuiInput-inputMarginDense-131",
                                                                    "inputMultiline": "MuiInput-inputMultiline-132",
                                                                    "inputType": "MuiInput-inputType-133",
                                                                    "inputTypeSearch": "MuiInput-inputTypeSearch-134",
                                                                    "multiline": "MuiInput-multiline-128",
                                                                    "root": "MuiInput-root-122",
                                                                    "underline": "MuiInput-underline-126",
                                                                  }
                                                                }
                                                                inputComponent={[Function]}
                                                                inputProps={
                                                                  Object {
                                                                    "keepCharPositions": undefined,
                                                                    "mask": null,
                                                                    "pipe": null,
                                                                    "readOnly": true,
                                                                  }
                                                                }
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                value=""
                                                              >
                                                                <WithStyles(WithFormControlContext(InputBase))
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "MuiInput-disabled-125",
                                                                      "error": "MuiInput-error-127",
                                                                      "focused": "MuiInput-focused-124",
                                                                      "formControl": "MuiInput-formControl-123",
                                                                      "fullWidth": "MuiInput-fullWidth-129",
                                                                      "input": "MuiInput-input-130",
                                                                      "inputMarginDense": "MuiInput-inputMarginDense-131",
                                                                      "inputMultiline": "MuiInput-inputMultiline-132",
                                                                      "inputType": "MuiInput-inputType-133",
                                                                      "inputTypeSearch": "MuiInput-inputTypeSearch-134",
                                                                      "multiline": "MuiInput-multiline-128",
                                                                      "root": "MuiInput-root-122 MuiInput-underline-126",
                                                                      "underline": null,
                                                                    }
                                                                  }
                                                                  fullWidth={false}
                                                                  inputComponent={[Function]}
                                                                  inputProps={
                                                                    Object {
                                                                      "keepCharPositions": undefined,
                                                                      "mask": null,
                                                                      "pipe": null,
                                                                      "readOnly": true,
                                                                    }
                                                                  }
                                                                  multiline={false}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  type="text"
                                                                  value=""
                                                                >
                                                                  <WithFormControlContext(InputBase)
                                                                    classes={
                                                                      Object {
                                                                        "adornedEnd": "MuiInputBase-adornedEnd-140",
                                                                        "adornedStart": "MuiInputBase-adornedStart-139",
                                                                        "disabled": "MuiInputBase-disabled-138 MuiInput-disabled-125",
                                                                        "error": "MuiInputBase-error-141 MuiInput-error-127",
                                                                        "focused": "MuiInputBase-focused-137 MuiInput-focused-124",
                                                                        "formControl": "MuiInputBase-formControl-136 MuiInput-formControl-123",
                                                                        "fullWidth": "MuiInputBase-fullWidth-144 MuiInput-fullWidth-129",
                                                                        "input": "MuiInputBase-input-145 MuiInput-input-130",
                                                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-151",
                                                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart-150",
                                                                        "inputMarginDense": "MuiInputBase-inputMarginDense-146 MuiInput-inputMarginDense-131",
                                                                        "inputMultiline": "MuiInputBase-inputMultiline-147 MuiInput-inputMultiline-132",
                                                                        "inputType": "MuiInputBase-inputType-148 MuiInput-inputType-133",
                                                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch-149 MuiInput-inputTypeSearch-134",
                                                                        "marginDense": "MuiInputBase-marginDense-142",
                                                                        "multiline": "MuiInputBase-multiline-143 MuiInput-multiline-128",
                                                                        "root": "MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126",
                                                                      }
                                                                    }
                                                                    fullWidth={false}
                                                                    inputComponent={[Function]}
                                                                    inputProps={
                                                                      Object {
                                                                        "keepCharPositions": undefined,
                                                                        "mask": null,
                                                                        "pipe": null,
                                                                        "readOnly": true,
                                                                      }
                                                                    }
                                                                    multiline={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    type="text"
                                                                    value=""
                                                                  >
                                                                    <InputBase
                                                                      classes={
                                                                        Object {
                                                                          "adornedEnd": "MuiInputBase-adornedEnd-140",
                                                                          "adornedStart": "MuiInputBase-adornedStart-139",
                                                                          "disabled": "MuiInputBase-disabled-138 MuiInput-disabled-125",
                                                                          "error": "MuiInputBase-error-141 MuiInput-error-127",
                                                                          "focused": "MuiInputBase-focused-137 MuiInput-focused-124",
                                                                          "formControl": "MuiInputBase-formControl-136 MuiInput-formControl-123",
                                                                          "fullWidth": "MuiInputBase-fullWidth-144 MuiInput-fullWidth-129",
                                                                          "input": "MuiInputBase-input-145 MuiInput-input-130",
                                                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-151",
                                                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart-150",
                                                                          "inputMarginDense": "MuiInputBase-inputMarginDense-146 MuiInput-inputMarginDense-131",
                                                                          "inputMultiline": "MuiInputBase-inputMultiline-147 MuiInput-inputMultiline-132",
                                                                          "inputType": "MuiInputBase-inputType-148 MuiInput-inputType-133",
                                                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch-149 MuiInput-inputTypeSearch-134",
                                                                          "marginDense": "MuiInputBase-marginDense-142",
                                                                          "multiline": "MuiInputBase-multiline-143 MuiInput-multiline-128",
                                                                          "root": "MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126",
                                                                        }
                                                                      }
                                                                      fullWidth={false}
                                                                      inputComponent={[Function]}
                                                                      inputProps={
                                                                        Object {
                                                                          "keepCharPositions": undefined,
                                                                          "mask": null,
                                                                          "pipe": null,
                                                                          "readOnly": true,
                                                                        }
                                                                      }
                                                                      muiFormControl={
                                                                        Object {
                                                                          "adornedStart": false,
                                                                          "disabled": false,
                                                                          "error": false,
                                                                          "filled": false,
                                                                          "focused": false,
                                                                          "margin": "none",
                                                                          "onBlur": [Function],
                                                                          "onEmpty": [Function],
                                                                          "onFilled": [Function],
                                                                          "onFocus": [Function],
                                                                          "required": false,
                                                                          "variant": "standard",
                                                                        }
                                                                      }
                                                                      multiline={false}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <div
                                                                        className="MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126 MuiInputBase-formControl-136 MuiInput-formControl-123"
                                                                        onClick={[Function]}
                                                                      >
                                                                        <Input
                                                                          aria-invalid={false}
                                                                          className="MuiInputBase-input-145 MuiInput-input-130"
                                                                          disabled={false}
                                                                          inputRef={[Function]}
                                                                          mask={null}
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          pipe={null}
                                                                          readOnly={true}
                                                                          required={false}
                                                                          type="text"
                                                                          value=""
                                                                        >
                                                                          <input
                                                                            aria-invalid={false}
                                                                            className="MuiInputBase-input-145 MuiInput-input-130"
                                                                            disabled={false}
                                                                            mask={null}
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            pipe={null}
                                                                            readOnly={true}
                                                                            required={false}
                                                                            type="text"
                                                                            value=""
                                                                          />
                                                                        </Input>
                                                                      </div>
                                                                    </InputBase>
                                                                  </WithFormControlContext(InputBase)>
                                                                </WithStyles(WithFormControlContext(InputBase))>
                                                              </Input>
                                                            </WithStyles(Input)>
                                                          </div>
                                                        </FormControl>
                                                      </WithStyles(FormControl)>
                                                    </TextField>
                                                  </DateTextField>
                                                </WithUtils(DateTextField)>
                                                <WithStyles(Popover)
                                                  anchorEl={null}
                                                  anchorOrigin={
                                                    Object {
                                                      "horizontal": "center",
                                                      "vertical": "bottom",
                                                    }
                                                  }
                                                  classes={
                                                    Object {
                                                      "paper": "InlineWrapper-popoverPaper-98",
                                                    }
                                                  }
                                                  id="picker-popover"
                                                  onClose={[Function]}
                                                  open={false}
                                                  transformOrigin={
                                                    Object {
                                                      "horizontal": "center",
                                                      "vertical": "top",
                                                    }
                                                  }
                                                >
                                                  <Popover
                                                    TransitionComponent={[Function]}
                                                    anchorEl={null}
                                                    anchorOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "bottom",
                                                      }
                                                    }
                                                    anchorReference="anchorEl"
                                                    classes={
                                                      Object {
                                                        "paper": "MuiPopover-paper-152 InlineWrapper-popoverPaper-98",
                                                      }
                                                    }
                                                    elevation={8}
                                                    id="picker-popover"
                                                    marginThreshold={16}
                                                    onClose={[Function]}
                                                    open={false}
                                                    transformOrigin={
                                                      Object {
                                                        "horizontal": "center",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                    transitionDuration="auto"
                                                  >
                                                    <WithStyles(Modal)
                                                      BackdropProps={
                                                        Object {
                                                          "invisible": true,
                                                        }
                                                      }
                                                      id="picker-popover"
                                                      onClose={[Function]}
                                                      open={false}
                                                    >
                                                      <Modal
                                                        BackdropComponent={[Function]}
                                                        BackdropProps={
                                                          Object {
                                                            "invisible": true,
                                                          }
                                                        }
                                                        classes={
                                                          Object {
                                                            "hidden": "MuiModal-hidden-154",
                                                            "root": "MuiModal-root-153",
                                                          }
                                                        }
                                                        closeAfterTransition={false}
                                                        disableAutoFocus={false}
                                                        disableBackdropClick={false}
                                                        disableEnforceFocus={false}
                                                        disableEscapeKeyDown={false}
                                                        disablePortal={false}
                                                        disableRestoreFocus={false}
                                                        hideBackdrop={false}
                                                        id="picker-popover"
                                                        keepMounted={false}
                                                        manager={
                                                          ModalManager {
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "modals": Array [],
                                                          }
                                                        }
                                                        onClose={[Function]}
                                                        open={false}
                                                      />
                                                    </WithStyles(Modal)>
                                                  </Popover>
                                                </WithStyles(Popover)>
                                              </InlineWrapper>
                                            </WithStyles(InlineWrapper)>
                                          </BasePicker>
                                        </WithUtils(BasePicker)>
                                      </TimePickerInline>
                                    </ForwardRef>
                                  </div>
                                </Styled(div)>
                              </div>
                            </Styled(div)>
                          </CSSTransitionGroupChild>
                        </span>
                      </TransitionGroup>
                    </CSSTransitionGroup>
                  </MuiPickersUtilsProvider>
                </Boundary>
              </div>
            </Paper>
          </WithStyles(Paper)>
        </Styled(WithStyles(Paper))>
        <Boundary>
          <Styled(div)>
            <div
              className="css-t8ltre"
            >
              <Styled(WithStyles(WithFormControlContext(Select)))
                autoWidth={true}
                onChange={[Function]}
                value="0"
              >
                <WithStyles(WithFormControlContext(Select))
                  autoWidth={true}
                  className="css-zo4nwl"
                  onChange={[Function]}
                  value="0"
                >
                  <WithFormControlContext(Select)
                    autoWidth={true}
                    className="css-zo4nwl"
                    classes={
                      Object {
                        "disabled": "MuiSelect-disabled-160",
                        "filled": "MuiSelect-filled-157",
                        "icon": "MuiSelect-icon-161",
                        "outlined": "MuiSelect-outlined-158",
                        "root": "MuiSelect-root-155",
                        "select": "MuiSelect-select-156",
                        "selectMenu": "MuiSelect-selectMenu-159",
                      }
                    }
                    onChange={[Function]}
                    value="0"
                  >
                    <Select
                      IconComponent={[Function]}
                      autoWidth={true}
                      className="css-zo4nwl"
                      classes={
                        Object {
                          "disabled": "MuiSelect-disabled-160",
                          "filled": "MuiSelect-filled-157",
                          "icon": "MuiSelect-icon-161",
                          "outlined": "MuiSelect-outlined-158",
                          "root": "MuiSelect-root-155",
                          "select": "MuiSelect-select-156",
                          "selectMenu": "MuiSelect-selectMenu-159",
                        }
                      }
                      displayEmpty={false}
                      input={<WithStyles(Input) />}
                      multiple={false}
                      native={false}
                      onChange={[Function]}
                      value="0"
                    >
                      <WithStyles(Input)
                        className="css-zo4nwl"
                        inputComponent={[Function]}
                        inputProps={
                          Object {
                            "IconComponent": [Function],
                            "MenuProps": undefined,
                            "SelectDisplayProps": undefined,
                            "autoWidth": true,
                            "children": Array [
                              <WithStyles(MenuItem)
                                disabled={true}
                                value="0"
                              >
                                Other Archetypes
                              </WithStyles(MenuItem)>,
                              Array [],
                            ],
                            "classes": Object {
                              "disabled": "MuiSelect-disabled-160",
                              "filled": "MuiSelect-filled-157",
                              "icon": "MuiSelect-icon-161",
                              "outlined": "MuiSelect-outlined-158",
                              "root": "MuiSelect-root-155",
                              "select": "MuiSelect-select-156",
                              "selectMenu": "MuiSelect-selectMenu-159",
                            },
                            "displayEmpty": false,
                            "multiple": false,
                            "onClose": undefined,
                            "onOpen": undefined,
                            "open": undefined,
                            "renderValue": undefined,
                            "type": undefined,
                            "variant": undefined,
                          }
                        }
                        onChange={[Function]}
                        value="0"
                      >
                        <Input
                          className="css-zo4nwl"
                          classes={
                            Object {
                              "disabled": "MuiInput-disabled-125",
                              "error": "MuiInput-error-127",
                              "focused": "MuiInput-focused-124",
                              "formControl": "MuiInput-formControl-123",
                              "fullWidth": "MuiInput-fullWidth-129",
                              "input": "MuiInput-input-130",
                              "inputMarginDense": "MuiInput-inputMarginDense-131",
                              "inputMultiline": "MuiInput-inputMultiline-132",
                              "inputType": "MuiInput-inputType-133",
                              "inputTypeSearch": "MuiInput-inputTypeSearch-134",
                              "multiline": "MuiInput-multiline-128",
                              "root": "MuiInput-root-122",
                              "underline": "MuiInput-underline-126",
                            }
                          }
                          inputComponent={[Function]}
                          inputProps={
                            Object {
                              "IconComponent": [Function],
                              "MenuProps": undefined,
                              "SelectDisplayProps": undefined,
                              "autoWidth": true,
                              "children": Array [
                                <WithStyles(MenuItem)
                                  disabled={true}
                                  value="0"
                                >
                                  Other Archetypes
                                </WithStyles(MenuItem)>,
                                Array [],
                              ],
                              "classes": Object {
                                "disabled": "MuiSelect-disabled-160",
                                "filled": "MuiSelect-filled-157",
                                "icon": "MuiSelect-icon-161",
                                "outlined": "MuiSelect-outlined-158",
                                "root": "MuiSelect-root-155",
                                "select": "MuiSelect-select-156",
                                "selectMenu": "MuiSelect-selectMenu-159",
                              },
                              "displayEmpty": false,
                              "multiple": false,
                              "onClose": undefined,
                              "onOpen": undefined,
                              "open": undefined,
                              "renderValue": undefined,
                              "type": undefined,
                              "variant": undefined,
                            }
                          }
                          onChange={[Function]}
                          value="0"
                        >
                          <WithStyles(WithFormControlContext(InputBase))
                            className="css-zo4nwl"
                            classes={
                              Object {
                                "disabled": "MuiInput-disabled-125",
                                "error": "MuiInput-error-127",
                                "focused": "MuiInput-focused-124",
                                "formControl": "MuiInput-formControl-123",
                                "fullWidth": "MuiInput-fullWidth-129",
                                "input": "MuiInput-input-130",
                                "inputMarginDense": "MuiInput-inputMarginDense-131",
                                "inputMultiline": "MuiInput-inputMultiline-132",
                                "inputType": "MuiInput-inputType-133",
                                "inputTypeSearch": "MuiInput-inputTypeSearch-134",
                                "multiline": "MuiInput-multiline-128",
                                "root": "MuiInput-root-122 MuiInput-underline-126",
                                "underline": null,
                              }
                            }
                            fullWidth={false}
                            inputComponent={[Function]}
                            inputProps={
                              Object {
                                "IconComponent": [Function],
                                "MenuProps": undefined,
                                "SelectDisplayProps": undefined,
                                "autoWidth": true,
                                "children": Array [
                                  <WithStyles(MenuItem)
                                    disabled={true}
                                    value="0"
                                  >
                                    Other Archetypes
                                  </WithStyles(MenuItem)>,
                                  Array [],
                                ],
                                "classes": Object {
                                  "disabled": "MuiSelect-disabled-160",
                                  "filled": "MuiSelect-filled-157",
                                  "icon": "MuiSelect-icon-161",
                                  "outlined": "MuiSelect-outlined-158",
                                  "root": "MuiSelect-root-155",
                                  "select": "MuiSelect-select-156",
                                  "selectMenu": "MuiSelect-selectMenu-159",
                                },
                                "displayEmpty": false,
                                "multiple": false,
                                "onClose": undefined,
                                "onOpen": undefined,
                                "open": undefined,
                                "renderValue": undefined,
                                "type": undefined,
                                "variant": undefined,
                              }
                            }
                            multiline={false}
                            onChange={[Function]}
                            type="text"
                            value="0"
                          >
                            <WithFormControlContext(InputBase)
                              className="css-zo4nwl"
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd-140",
                                  "adornedStart": "MuiInputBase-adornedStart-139",
                                  "disabled": "MuiInputBase-disabled-138 MuiInput-disabled-125",
                                  "error": "MuiInputBase-error-141 MuiInput-error-127",
                                  "focused": "MuiInputBase-focused-137 MuiInput-focused-124",
                                  "formControl": "MuiInputBase-formControl-136 MuiInput-formControl-123",
                                  "fullWidth": "MuiInputBase-fullWidth-144 MuiInput-fullWidth-129",
                                  "input": "MuiInputBase-input-145 MuiInput-input-130",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-151",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart-150",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense-146 MuiInput-inputMarginDense-131",
                                  "inputMultiline": "MuiInputBase-inputMultiline-147 MuiInput-inputMultiline-132",
                                  "inputType": "MuiInputBase-inputType-148 MuiInput-inputType-133",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch-149 MuiInput-inputTypeSearch-134",
                                  "marginDense": "MuiInputBase-marginDense-142",
                                  "multiline": "MuiInputBase-multiline-143 MuiInput-multiline-128",
                                  "root": "MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126",
                                }
                              }
                              fullWidth={false}
                              inputComponent={[Function]}
                              inputProps={
                                Object {
                                  "IconComponent": [Function],
                                  "MenuProps": undefined,
                                  "SelectDisplayProps": undefined,
                                  "autoWidth": true,
                                  "children": Array [
                                    <WithStyles(MenuItem)
                                      disabled={true}
                                      value="0"
                                    >
                                      Other Archetypes
                                    </WithStyles(MenuItem)>,
                                    Array [],
                                  ],
                                  "classes": Object {
                                    "disabled": "MuiSelect-disabled-160",
                                    "filled": "MuiSelect-filled-157",
                                    "icon": "MuiSelect-icon-161",
                                    "outlined": "MuiSelect-outlined-158",
                                    "root": "MuiSelect-root-155",
                                    "select": "MuiSelect-select-156",
                                    "selectMenu": "MuiSelect-selectMenu-159",
                                  },
                                  "displayEmpty": false,
                                  "multiple": false,
                                  "onClose": undefined,
                                  "onOpen": undefined,
                                  "open": undefined,
                                  "renderValue": undefined,
                                  "type": undefined,
                                  "variant": undefined,
                                }
                              }
                              multiline={false}
                              onChange={[Function]}
                              type="text"
                              value="0"
                            >
                              <InputBase
                                className="css-zo4nwl"
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd-140",
                                    "adornedStart": "MuiInputBase-adornedStart-139",
                                    "disabled": "MuiInputBase-disabled-138 MuiInput-disabled-125",
                                    "error": "MuiInputBase-error-141 MuiInput-error-127",
                                    "focused": "MuiInputBase-focused-137 MuiInput-focused-124",
                                    "formControl": "MuiInputBase-formControl-136 MuiInput-formControl-123",
                                    "fullWidth": "MuiInputBase-fullWidth-144 MuiInput-fullWidth-129",
                                    "input": "MuiInputBase-input-145 MuiInput-input-130",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-151",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart-150",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense-146 MuiInput-inputMarginDense-131",
                                    "inputMultiline": "MuiInputBase-inputMultiline-147 MuiInput-inputMultiline-132",
                                    "inputType": "MuiInputBase-inputType-148 MuiInput-inputType-133",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch-149 MuiInput-inputTypeSearch-134",
                                    "marginDense": "MuiInputBase-marginDense-142",
                                    "multiline": "MuiInputBase-multiline-143 MuiInput-multiline-128",
                                    "root": "MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126",
                                  }
                                }
                                fullWidth={false}
                                inputComponent={[Function]}
                                inputProps={
                                  Object {
                                    "IconComponent": [Function],
                                    "MenuProps": undefined,
                                    "SelectDisplayProps": undefined,
                                    "autoWidth": true,
                                    "children": Array [
                                      <WithStyles(MenuItem)
                                        disabled={true}
                                        value="0"
                                      >
                                        Other Archetypes
                                      </WithStyles(MenuItem)>,
                                      Array [],
                                    ],
                                    "classes": Object {
                                      "disabled": "MuiSelect-disabled-160",
                                      "filled": "MuiSelect-filled-157",
                                      "icon": "MuiSelect-icon-161",
                                      "outlined": "MuiSelect-outlined-158",
                                      "root": "MuiSelect-root-155",
                                      "select": "MuiSelect-select-156",
                                      "selectMenu": "MuiSelect-selectMenu-159",
                                    },
                                    "displayEmpty": false,
                                    "multiple": false,
                                    "onClose": undefined,
                                    "onOpen": undefined,
                                    "open": undefined,
                                    "renderValue": undefined,
                                    "type": undefined,
                                    "variant": undefined,
                                  }
                                }
                                multiline={false}
                                onChange={[Function]}
                                type="text"
                                value="0"
                              >
                                <div
                                  className="MuiInputBase-root-135 MuiInput-root-122 MuiInput-underline-126 css-zo4nwl"
                                  onClick={[Function]}
                                >
                                  <SelectInput
                                    IconComponent={[Function]}
                                    autoWidth={true}
                                    className="MuiInputBase-input-145 MuiInput-input-130"
                                    classes={
                                      Object {
                                        "disabled": "MuiSelect-disabled-160",
                                        "filled": "MuiSelect-filled-157",
                                        "icon": "MuiSelect-icon-161",
                                        "outlined": "MuiSelect-outlined-158",
                                        "root": "MuiSelect-root-155",
                                        "select": "MuiSelect-select-156",
                                        "selectMenu": "MuiSelect-selectMenu-159",
                                      }
                                    }
                                    displayEmpty={false}
                                    inputRef={[Function]}
                                    multiple={false}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    value="0"
                                  >
                                    <div
                                      className="MuiSelect-root-155"
                                    >
                                      <div
                                        aria-haspopup="true"
                                        aria-pressed="false"
                                        className="MuiSelect-select-156 MuiSelect-selectMenu-159 MuiInputBase-input-145 MuiInput-input-130"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        Other Archetypes
                                      </div>
                                      <input
                                        type="hidden"
                                        value="0"
                                      />
                                      <pure(ArrowDropDown)
                                        className="MuiSelect-icon-161"
                                      >
                                        <ArrowDropDown
                                          className="MuiSelect-icon-161"
                                        >
                                          <WithStyles(SvgIcon)
                                            className="MuiSelect-icon-161"
                                          >
                                            <SvgIcon
                                              className="MuiSelect-icon-161"
                                              classes={
                                                Object {
                                                  "colorAction": "MuiSvgIcon-colorAction-31",
                                                  "colorDisabled": "MuiSvgIcon-colorDisabled-33",
                                                  "colorError": "MuiSvgIcon-colorError-32",
                                                  "colorPrimary": "MuiSvgIcon-colorPrimary-29",
                                                  "colorSecondary": "MuiSvgIcon-colorSecondary-30",
                                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-34",
                                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-36",
                                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-35",
                                                  "root": "MuiSvgIcon-root-28",
                                                }
                                              }
                                              color="inherit"
                                              component="svg"
                                              fontSize="default"
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden="true"
                                                className="MuiSvgIcon-root-28 MuiSelect-icon-161"
                                                focusable="false"
                                                role="presentation"
                                                viewBox="0 0 24 24"
                                              >
                                                <path
                                                  d="M7 10l5 5 5-5z"
                                                />
                                              </svg>
                                            </SvgIcon>
                                          </WithStyles(SvgIcon)>
                                        </ArrowDropDown>
                                      </pure(ArrowDropDown)>
                                      <WithStyles(Menu)
                                        MenuListProps={
                                          Object {
                                            "disableListWrap": true,
                                            "role": "listbox",
                                          }
                                        }
                                        PaperProps={
                                          Object {
                                            "style": Object {
                                              "minWidth": null,
                                            },
                                          }
                                        }
                                        id="menu-"
                                        onClose={[Function]}
                                        open={false}
                                      >
                                        <Menu
                                          MenuListProps={
                                            Object {
                                              "disableListWrap": true,
                                              "role": "listbox",
                                            }
                                          }
                                          PaperProps={
                                            Object {
                                              "style": Object {
                                                "minWidth": null,
                                              },
                                            }
                                          }
                                          classes={
                                            Object {
                                              "paper": "MuiMenu-paper-162",
                                            }
                                          }
                                          disableAutoFocusItem={false}
                                          id="menu-"
                                          onClose={[Function]}
                                          open={false}
                                          theme={
                                            Object {
                                              "breakpoints": Object {
                                                "between": [Function],
                                                "down": [Function],
                                                "keys": Array [
                                                  "xs",
                                                  "sm",
                                                  "md",
                                                  "lg",
                                                  "xl",
                                                ],
                                                "only": [Function],
                                                "up": [Function],
                                                "values": Object {
                                                  "lg": 1280,
                                                  "md": 960,
                                                  "sm": 600,
                                                  "xl": 1920,
                                                  "xs": 0,
                                                },
                                                "width": [Function],
                                              },
                                              "direction": "ltr",
                                              "mixins": Object {
                                                "gutters": [Function],
                                                "toolbar": Object {
                                                  "@media (min-width:0px) and (orientation: landscape)": Object {
                                                    "minHeight": 48,
                                                  },
                                                  "@media (min-width:600px)": Object {
                                                    "minHeight": 64,
                                                  },
                                                  "minHeight": 56,
                                                },
                                              },
                                              "overrides": Object {},
                                              "palette": Object {
                                                "action": Object {
                                                  "active": "rgba(0, 0, 0, 0.54)",
                                                  "disabled": "rgba(0, 0, 0, 0.26)",
                                                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                  "hover": "rgba(0, 0, 0, 0.08)",
                                                  "hoverOpacity": 0.08,
                                                  "selected": "rgba(0, 0, 0, 0.14)",
                                                },
                                                "augmentColor": [Function],
                                                "background": Object {
                                                  "default": "#fafafa",
                                                  "paper": "#fff",
                                                },
                                                "common": Object {
                                                  "black": "#000",
                                                  "white": "#fff",
                                                },
                                                "contrastThreshold": 3,
                                                "divider": "rgba(0, 0, 0, 0.12)",
                                                "error": Object {
                                                  "contrastText": "#fff",
                                                  "dark": "#d32f2f",
                                                  "light": "#e57373",
                                                  "main": "#f44336",
                                                },
                                                "getContrastText": [Function],
                                                "grey": Object {
                                                  "100": "#f5f5f5",
                                                  "200": "#eeeeee",
                                                  "300": "#e0e0e0",
                                                  "400": "#bdbdbd",
                                                  "50": "#fafafa",
                                                  "500": "#9e9e9e",
                                                  "600": "#757575",
                                                  "700": "#616161",
                                                  "800": "#424242",
                                                  "900": "#212121",
                                                  "A100": "#d5d5d5",
                                                  "A200": "#aaaaaa",
                                                  "A400": "#303030",
                                                  "A700": "#616161",
                                                },
                                                "primary": Object {
                                                  "contrastText": "#fff",
                                                  "dark": "#303f9f",
                                                  "light": "#7986cb",
                                                  "main": "#3f51b5",
                                                },
                                                "secondary": Object {
                                                  "contrastText": "#fff",
                                                  "dark": "#c51162",
                                                  "light": "#ff4081",
                                                  "main": "#f50057",
                                                },
                                                "text": Object {
                                                  "disabled": "rgba(0, 0, 0, 0.38)",
                                                  "hint": "rgba(0, 0, 0, 0.38)",
                                                  "primary": "rgba(0, 0, 0, 0.87)",
                                                  "secondary": "rgba(0, 0, 0, 0.54)",
                                                },
                                                "tonalOffset": 0.2,
                                                "type": "light",
                                              },
                                              "props": Object {},
                                              "shadows": Array [
                                                "none",
                                                "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                                "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                                "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                                "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                                "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                              ],
                                              "shape": Object {
                                                "borderRadius": 4,
                                              },
                                              "spacing": Object {
                                                "unit": 8,
                                              },
                                              "transitions": Object {
                                                "create": [Function],
                                                "duration": Object {
                                                  "complex": 375,
                                                  "enteringScreen": 225,
                                                  "leavingScreen": 195,
                                                  "short": 250,
                                                  "shorter": 200,
                                                  "shortest": 150,
                                                  "standard": 300,
                                                },
                                                "easing": Object {
                                                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                                },
                                                "getAutoHeightDuration": [Function],
                                              },
                                              "typography": Object {
                                                "body1": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 400,
                                                  "lineHeight": "1.46429em",
                                                },
                                                "body1Next": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.00938em",
                                                  "lineHeight": 1.5,
                                                },
                                                "body2": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 500,
                                                  "lineHeight": "1.71429em",
                                                },
                                                "body2Next": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.01071em",
                                                  "lineHeight": 1.5,
                                                },
                                                "button": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 500,
                                                  "textTransform": "uppercase",
                                                },
                                                "buttonNext": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 500,
                                                  "letterSpacing": "0.02857em",
                                                  "lineHeight": 1.75,
                                                  "textTransform": "uppercase",
                                                },
                                                "caption": Object {
                                                  "color": "rgba(0, 0, 0, 0.54)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.75rem",
                                                  "fontWeight": 400,
                                                  "lineHeight": "1.375em",
                                                },
                                                "captionNext": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.75rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.03333em",
                                                  "lineHeight": 1.66,
                                                },
                                                "display1": Object {
                                                  "color": "rgba(0, 0, 0, 0.54)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "2.125rem",
                                                  "fontWeight": 400,
                                                  "lineHeight": "1.20588em",
                                                },
                                                "display2": Object {
                                                  "color": "rgba(0, 0, 0, 0.54)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "2.8125rem",
                                                  "fontWeight": 400,
                                                  "lineHeight": "1.13333em",
                                                  "marginLeft": "-.02em",
                                                },
                                                "display3": Object {
                                                  "color": "rgba(0, 0, 0, 0.54)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "3.5rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "-.02em",
                                                  "lineHeight": "1.30357em",
                                                  "marginLeft": "-.02em",
                                                },
                                                "display4": Object {
                                                  "color": "rgba(0, 0, 0, 0.54)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "7rem",
                                                  "fontWeight": 300,
                                                  "letterSpacing": "-.04em",
                                                  "lineHeight": "1.14286em",
                                                  "marginLeft": "-.04em",
                                                },
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": 14,
                                                "fontWeightLight": 300,
                                                "fontWeightMedium": 500,
                                                "fontWeightRegular": 400,
                                                "h1": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "6rem",
                                                  "fontWeight": 300,
                                                  "letterSpacing": "-0.01562em",
                                                  "lineHeight": 1,
                                                },
                                                "h2": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "3.75rem",
                                                  "fontWeight": 300,
                                                  "letterSpacing": "-0.00833em",
                                                  "lineHeight": 1,
                                                },
                                                "h3": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "3rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0em",
                                                  "lineHeight": 1.04,
                                                },
                                                "h4": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "2.125rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.00735em",
                                                  "lineHeight": 1.17,
                                                },
                                                "h5": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1.5rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0em",
                                                  "lineHeight": 1.33,
                                                },
                                                "h6": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1.25rem",
                                                  "fontWeight": 500,
                                                  "letterSpacing": "0.0075em",
                                                  "lineHeight": 1.6,
                                                },
                                                "headline": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1.5rem",
                                                  "fontWeight": 400,
                                                  "lineHeight": "1.35417em",
                                                },
                                                "overline": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.75rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.08333em",
                                                  "lineHeight": 2.66,
                                                  "textTransform": "uppercase",
                                                },
                                                "pxToRem": [Function],
                                                "round": [Function],
                                                "subheading": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1rem",
                                                  "fontWeight": 400,
                                                  "lineHeight": "1.5em",
                                                },
                                                "subtitle1": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1rem",
                                                  "fontWeight": 400,
                                                  "letterSpacing": "0.00938em",
                                                  "lineHeight": 1.75,
                                                },
                                                "subtitle2": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "0.875rem",
                                                  "fontWeight": 500,
                                                  "letterSpacing": "0.00714em",
                                                  "lineHeight": 1.57,
                                                },
                                                "title": Object {
                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                  "fontSize": "1.3125rem",
                                                  "fontWeight": 500,
                                                  "lineHeight": "1.16667em",
                                                },
                                                "useNextVariants": false,
                                              },
                                              "zIndex": Object {
                                                "appBar": 1100,
                                                "drawer": 1200,
                                                "mobileStepper": 1000,
                                                "modal": 1300,
                                                "snackbar": 1400,
                                                "tooltip": 1500,
                                              },
                                            }
                                          }
                                          transitionDuration="auto"
                                        >
                                          <WithStyles(Popover)
                                            PaperProps={
                                              Object {
                                                "classes": Object {
                                                  "root": "MuiMenu-paper-162",
                                                },
                                                "style": Object {
                                                  "minWidth": null,
                                                },
                                              }
                                            }
                                            anchorOrigin={
                                              Object {
                                                "horizontal": "left",
                                                "vertical": "top",
                                              }
                                            }
                                            getContentAnchorEl={[Function]}
                                            id="menu-"
                                            onClose={[Function]}
                                            onEntering={[Function]}
                                            open={false}
                                            transformOrigin={
                                              Object {
                                                "horizontal": "left",
                                                "vertical": "top",
                                              }
                                            }
                                            transitionDuration="auto"
                                          >
                                            <Popover
                                              PaperProps={
                                                Object {
                                                  "classes": Object {
                                                    "root": "MuiMenu-paper-162",
                                                  },
                                                  "style": Object {
                                                    "minWidth": null,
                                                  },
                                                }
                                              }
                                              TransitionComponent={[Function]}
                                              anchorOrigin={
                                                Object {
                                                  "horizontal": "left",
                                                  "vertical": "top",
                                                }
                                              }
                                              anchorReference="anchorEl"
                                              classes={
                                                Object {
                                                  "paper": "MuiPopover-paper-152",
                                                }
                                              }
                                              elevation={8}
                                              getContentAnchorEl={[Function]}
                                              id="menu-"
                                              marginThreshold={16}
                                              onClose={[Function]}
                                              onEntering={[Function]}
                                              open={false}
                                              transformOrigin={
                                                Object {
                                                  "horizontal": "left",
                                                  "vertical": "top",
                                                }
                                              }
                                              transitionDuration="auto"
                                            >
                                              <WithStyles(Modal)
                                                BackdropProps={
                                                  Object {
                                                    "invisible": true,
                                                  }
                                                }
                                                id="menu-"
                                                onClose={[Function]}
                                                open={false}
                                              >
                                                <Modal
                                                  BackdropComponent={[Function]}
                                                  BackdropProps={
                                                    Object {
                                                      "invisible": true,
                                                    }
                                                  }
                                                  classes={
                                                    Object {
                                                      "hidden": "MuiModal-hidden-154",
                                                      "root": "MuiModal-root-153",
                                                    }
                                                  }
                                                  closeAfterTransition={false}
                                                  disableAutoFocus={false}
                                                  disableBackdropClick={false}
                                                  disableEnforceFocus={false}
                                                  disableEscapeKeyDown={false}
                                                  disablePortal={false}
                                                  disableRestoreFocus={false}
                                                  hideBackdrop={false}
                                                  id="menu-"
                                                  keepMounted={false}
                                                  manager={
                                                    ModalManager {
                                                      "data": Array [],
                                                      "handleContainerOverflow": true,
                                                      "hideSiblingNodes": true,
                                                      "modals": Array [],
                                                    }
                                                  }
                                                  onClose={[Function]}
                                                  open={false}
                                                />
                                              </WithStyles(Modal)>
                                            </Popover>
                                          </WithStyles(Popover)>
                                        </Menu>
                                      </WithStyles(Menu)>
                                    </div>
                                  </SelectInput>
                                </div>
                              </InputBase>
                            </WithFormControlContext(InputBase)>
                          </WithStyles(WithFormControlContext(InputBase))>
                        </Input>
                      </WithStyles(Input)>
                    </Select>
                  </WithFormControlContext(Select)>
                </WithStyles(WithFormControlContext(Select))>
              </Styled(WithStyles(WithFormControlContext(Select)))>
            </div>
          </Styled(div)>
        </Boundary>
        <Boundary>
          <Styled(div)>
            <div
              className="css-we1mwf"
            >
              <CSSTransitionGroup
                transitionAppear={true}
                transitionAppearTimeout={200}
                transitionEnter={true}
                transitionEnterTimeout={200}
                transitionLeave={true}
                transitionLeaveTimeout={200}
                transitionName="expand"
              >
                <TransitionGroup
                  childFactory={[Function]}
                  component="span"
                  transitionAppear={true}
                  transitionAppearTimeout={200}
                  transitionEnter={true}
                  transitionEnterTimeout={200}
                  transitionLeave={true}
                  transitionLeaveTimeout={200}
                  transitionName="expand"
                >
                  <span />
                </TransitionGroup>
              </CSSTransitionGroup>
            </div>
          </Styled(div)>
        </Boundary>
        <Boundary>
          <Styled(div)>
            <div
              className="css-1gg9ed9"
            >
              <WithStyles(Button)
                onClick={[Function]}
                variant="contained"
              >
                <Button
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit-184",
                      "contained": "MuiButton-contained-174",
                      "containedPrimary": "MuiButton-containedPrimary-175",
                      "containedSecondary": "MuiButton-containedSecondary-176",
                      "disabled": "MuiButton-disabled-183",
                      "extendedFab": "MuiButton-extendedFab-181",
                      "fab": "MuiButton-fab-180",
                      "flat": "MuiButton-flat-168",
                      "flatPrimary": "MuiButton-flatPrimary-169",
                      "flatSecondary": "MuiButton-flatSecondary-170",
                      "focusVisible": "MuiButton-focusVisible-182",
                      "fullWidth": "MuiButton-fullWidth-188",
                      "label": "MuiButton-label-164",
                      "mini": "MuiButton-mini-185",
                      "outlined": "MuiButton-outlined-171",
                      "outlinedPrimary": "MuiButton-outlinedPrimary-172",
                      "outlinedSecondary": "MuiButton-outlinedSecondary-173",
                      "raised": "MuiButton-raised-177",
                      "raisedPrimary": "MuiButton-raisedPrimary-178",
                      "raisedSecondary": "MuiButton-raisedSecondary-179",
                      "root": "MuiButton-root-163",
                      "sizeLarge": "MuiButton-sizeLarge-187",
                      "sizeSmall": "MuiButton-sizeSmall-186",
                      "text": "MuiButton-text-165",
                      "textPrimary": "MuiButton-textPrimary-166",
                      "textSecondary": "MuiButton-textSecondary-167",
                    }
                  }
                  color="default"
                  component="button"
                  disableFocusRipple={false}
                  disabled={false}
                  fullWidth={false}
                  mini={false}
                  onClick={[Function]}
                  size="medium"
                  type="button"
                  variant="contained"
                >
                  <WithStyles(ButtonBase)
                    className="MuiButton-root-163 MuiButton-contained-174 MuiButton-raised-177"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="MuiButton-focusVisible-182"
                    onClick={[Function]}
                    type="button"
                  >
                    <ButtonBase
                      centerRipple={false}
                      className="MuiButton-root-163 MuiButton-contained-174 MuiButton-raised-177"
                      classes={
                        Object {
                          "disabled": "MuiButtonBase-disabled-60",
                          "focusVisible": "MuiButtonBase-focusVisible-61",
                          "root": "MuiButtonBase-root-59",
                        }
                      }
                      component="button"
                      disableRipple={false}
                      disableTouchRipple={false}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="MuiButton-focusVisible-182"
                      onClick={[Function]}
                      tabIndex="0"
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root-59 MuiButton-root-163 MuiButton-contained-174 MuiButton-raised-177"
                        disabled={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onContextMenu={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        tabIndex="0"
                        type="button"
                      >
                        <span
                          className="MuiButton-label-164"
                        >
                          <pure(KeyboardArrowLeftIcon)>
                            <KeyboardArrowLeftIcon>
                              <WithStyles(SvgIcon)>
                                <SvgIcon
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction-31",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled-33",
                                      "colorError": "MuiSvgIcon-colorError-32",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary-29",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary-30",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-34",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-36",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-35",
                                      "root": "MuiSvgIcon-root-28",
                                    }
                                  }
                                  color="inherit"
                                  component="svg"
                                  fontSize="default"
                                  viewBox="0 0 24 24"
                                >
                                  <svg
                                    aria-hidden="true"
                                    className="MuiSvgIcon-root-28"
                                    focusable="false"
                                    role="presentation"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
                                    />
                                    <path
                                      d="M0 0h24v24H0V0z"
                                      fill="none"
                                    />
                                  </svg>
                                </SvgIcon>
                              </WithStyles(SvgIcon)>
                            </KeyboardArrowLeftIcon>
                          </pure(KeyboardArrowLeftIcon)>
                            Cancel
                        </span>
                        <NoSsr
                          defer={false}
                          fallback={null}
                        >
                          <WithStyles(TouchRipple)
                            center={false}
                            innerRef={[Function]}
                          >
                            <TouchRipple
                              center={false}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child-193",
                                  "childLeaving": "MuiTouchRipple-childLeaving-194",
                                  "childPulsate": "MuiTouchRipple-childPulsate-195",
                                  "ripple": "MuiTouchRipple-ripple-190",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-192",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible-191",
                                  "root": "MuiTouchRipple-root-189",
                                }
                              }
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                className="MuiTouchRipple-root-189"
                                component="span"
                                enter={true}
                                exit={true}
                              >
                                <span
                                  className="MuiTouchRipple-root-189"
                                />
                              </TransitionGroup>
                            </TouchRipple>
                          </WithStyles(TouchRipple)>
                        </NoSsr>
                      </button>
                    </ButtonBase>
                  </WithStyles(ButtonBase)>
                </Button>
              </WithStyles(Button)>
              <Styled(div)>
                <div
                  className="css-1dwho6k"
                >
                  <WithStyles(Button)
                    className="detail-panel-save-button"
                    color="primary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    <Button
                      className="detail-panel-save-button"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit-184",
                          "contained": "MuiButton-contained-174",
                          "containedPrimary": "MuiButton-containedPrimary-175",
                          "containedSecondary": "MuiButton-containedSecondary-176",
                          "disabled": "MuiButton-disabled-183",
                          "extendedFab": "MuiButton-extendedFab-181",
                          "fab": "MuiButton-fab-180",
                          "flat": "MuiButton-flat-168",
                          "flatPrimary": "MuiButton-flatPrimary-169",
                          "flatSecondary": "MuiButton-flatSecondary-170",
                          "focusVisible": "MuiButton-focusVisible-182",
                          "fullWidth": "MuiButton-fullWidth-188",
                          "label": "MuiButton-label-164",
                          "mini": "MuiButton-mini-185",
                          "outlined": "MuiButton-outlined-171",
                          "outlinedPrimary": "MuiButton-outlinedPrimary-172",
                          "outlinedSecondary": "MuiButton-outlinedSecondary-173",
                          "raised": "MuiButton-raised-177",
                          "raisedPrimary": "MuiButton-raisedPrimary-178",
                          "raisedSecondary": "MuiButton-raisedSecondary-179",
                          "root": "MuiButton-root-163",
                          "sizeLarge": "MuiButton-sizeLarge-187",
                          "sizeSmall": "MuiButton-sizeSmall-186",
                          "text": "MuiButton-text-165",
                          "textPrimary": "MuiButton-textPrimary-166",
                          "textSecondary": "MuiButton-textSecondary-167",
                        }
                      }
                      color="primary"
                      component="button"
                      disableFocusRipple={false}
                      disabled={false}
                      fullWidth={false}
                      mini={false}
                      onClick={[Function]}
                      size="medium"
                      type="button"
                      variant="contained"
                    >
                      <WithStyles(ButtonBase)
                        className="MuiButton-root-163 MuiButton-contained-174 MuiButton-containedPrimary-175 MuiButton-raised-177 MuiButton-raisedPrimary-178 detail-panel-save-button"
                        component="button"
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="MuiButton-focusVisible-182"
                        onClick={[Function]}
                        type="button"
                      >
                        <ButtonBase
                          centerRipple={false}
                          className="MuiButton-root-163 MuiButton-contained-174 MuiButton-containedPrimary-175 MuiButton-raised-177 MuiButton-raisedPrimary-178 detail-panel-save-button"
                          classes={
                            Object {
                              "disabled": "MuiButtonBase-disabled-60",
                              "focusVisible": "MuiButtonBase-focusVisible-61",
                              "root": "MuiButtonBase-root-59",
                            }
                          }
                          component="button"
                          disableRipple={false}
                          disableTouchRipple={false}
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="MuiButton-focusVisible-182"
                          onClick={[Function]}
                          tabIndex="0"
                          type="button"
                        >
                          <button
                            className="MuiButtonBase-root-59 MuiButton-root-163 MuiButton-contained-174 MuiButton-containedPrimary-175 MuiButton-raised-177 MuiButton-raisedPrimary-178 detail-panel-save-button"
                            disabled={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onContextMenu={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex="0"
                            type="button"
                          >
                            <span
                              className="MuiButton-label-164"
                            >
                              <pure(SaveIcon)>
                                <SaveIcon>
                                  <WithStyles(SvgIcon)>
                                    <SvgIcon
                                      classes={
                                        Object {
                                          "colorAction": "MuiSvgIcon-colorAction-31",
                                          "colorDisabled": "MuiSvgIcon-colorDisabled-33",
                                          "colorError": "MuiSvgIcon-colorError-32",
                                          "colorPrimary": "MuiSvgIcon-colorPrimary-29",
                                          "colorSecondary": "MuiSvgIcon-colorSecondary-30",
                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-34",
                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-36",
                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-35",
                                          "root": "MuiSvgIcon-root-28",
                                        }
                                      }
                                      color="inherit"
                                      component="svg"
                                      fontSize="default"
                                      viewBox="0 0 24 24"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className="MuiSvgIcon-root-28"
                                        focusable="false"
                                        role="presentation"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M0 0h24v24H0z"
                                          fill="none"
                                        />
                                        <path
                                          d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"
                                        />
                                      </svg>
                                    </SvgIcon>
                                  </WithStyles(SvgIcon)>
                                </SaveIcon>
                              </pure(SaveIcon)>
                                Save
                            </span>
                            <NoSsr
                              defer={false}
                              fallback={null}
                            >
                              <WithStyles(TouchRipple)
                                center={false}
                                innerRef={[Function]}
                              >
                                <TouchRipple
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child-193",
                                      "childLeaving": "MuiTouchRipple-childLeaving-194",
                                      "childPulsate": "MuiTouchRipple-childPulsate-195",
                                      "ripple": "MuiTouchRipple-ripple-190",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate-192",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible-191",
                                      "root": "MuiTouchRipple-root-189",
                                    }
                                  }
                                >
                                  <TransitionGroup
                                    childFactory={[Function]}
                                    className="MuiTouchRipple-root-189"
                                    component="span"
                                    enter={true}
                                    exit={true}
                                  >
                                    <span
                                      className="MuiTouchRipple-root-189"
                                    />
                                  </TransitionGroup>
                                </TouchRipple>
                              </WithStyles(TouchRipple)>
                            </NoSsr>
                          </button>
                        </ButtonBase>
                      </WithStyles(ButtonBase)>
                    </Button>
                  </WithStyles(Button)>
                  <WithStyles(Button)
                    className="detail-panel-add-visit-button"
                    color="primary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    <Button
                      className="detail-panel-add-visit-button"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit-184",
                          "contained": "MuiButton-contained-174",
                          "containedPrimary": "MuiButton-containedPrimary-175",
                          "containedSecondary": "MuiButton-containedSecondary-176",
                          "disabled": "MuiButton-disabled-183",
                          "extendedFab": "MuiButton-extendedFab-181",
                          "fab": "MuiButton-fab-180",
                          "flat": "MuiButton-flat-168",
                          "flatPrimary": "MuiButton-flatPrimary-169",
                          "flatSecondary": "MuiButton-flatSecondary-170",
                          "focusVisible": "MuiButton-focusVisible-182",
                          "fullWidth": "MuiButton-fullWidth-188",
                          "label": "MuiButton-label-164",
                          "mini": "MuiButton-mini-185",
                          "outlined": "MuiButton-outlined-171",
                          "outlinedPrimary": "MuiButton-outlinedPrimary-172",
                          "outlinedSecondary": "MuiButton-outlinedSecondary-173",
                          "raised": "MuiButton-raised-177",
                          "raisedPrimary": "MuiButton-raisedPrimary-178",
                          "raisedSecondary": "MuiButton-raisedSecondary-179",
                          "root": "MuiButton-root-163",
                          "sizeLarge": "MuiButton-sizeLarge-187",
                          "sizeSmall": "MuiButton-sizeSmall-186",
                          "text": "MuiButton-text-165",
                          "textPrimary": "MuiButton-textPrimary-166",
                          "textSecondary": "MuiButton-textSecondary-167",
                        }
                      }
                      color="primary"
                      component="button"
                      disableFocusRipple={false}
                      disabled={false}
                      fullWidth={false}
                      mini={false}
                      onClick={[Function]}
                      size="medium"
                      type="button"
                      variant="contained"
                    >
                      <WithStyles(ButtonBase)
                        className="MuiButton-root-163 MuiButton-contained-174 MuiButton-containedPrimary-175 MuiButton-raised-177 MuiButton-raisedPrimary-178 detail-panel-add-visit-button"
                        component="button"
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="MuiButton-focusVisible-182"
                        onClick={[Function]}
                        type="button"
                      >
                        <ButtonBase
                          centerRipple={false}
                          className="MuiButton-root-163 MuiButton-contained-174 MuiButton-containedPrimary-175 MuiButton-raised-177 MuiButton-raisedPrimary-178 detail-panel-add-visit-button"
                          classes={
                            Object {
                              "disabled": "MuiButtonBase-disabled-60",
                              "focusVisible": "MuiButtonBase-focusVisible-61",
                              "root": "MuiButtonBase-root-59",
                            }
                          }
                          component="button"
                          disableRipple={false}
                          disableTouchRipple={false}
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="MuiButton-focusVisible-182"
                          onClick={[Function]}
                          tabIndex="0"
                          type="button"
                        >
                          <button
                            className="MuiButtonBase-root-59 MuiButton-root-163 MuiButton-contained-174 MuiButton-containedPrimary-175 MuiButton-raised-177 MuiButton-raisedPrimary-178 detail-panel-add-visit-button"
                            disabled={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onContextMenu={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex="0"
                            type="button"
                          >
                            <span
                              className="MuiButton-label-164"
                            >
                              <pure(VpnKeyIcon)>
                                <VpnKeyIcon>
                                  <WithStyles(SvgIcon)>
                                    <SvgIcon
                                      classes={
                                        Object {
                                          "colorAction": "MuiSvgIcon-colorAction-31",
                                          "colorDisabled": "MuiSvgIcon-colorDisabled-33",
                                          "colorError": "MuiSvgIcon-colorError-32",
                                          "colorPrimary": "MuiSvgIcon-colorPrimary-29",
                                          "colorSecondary": "MuiSvgIcon-colorSecondary-30",
                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-34",
                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-36",
                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-35",
                                          "root": "MuiSvgIcon-root-28",
                                        }
                                      }
                                      color="inherit"
                                      component="svg"
                                      fontSize="default"
                                      viewBox="0 0 24 24"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className="MuiSvgIcon-root-28"
                                        focusable="false"
                                        role="presentation"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M0 0h24v24H0z"
                                          fill="none"
                                        />
                                        <path
                                          d="M12.65 10C11.83 7.67 9.61 6 7 6c-3.31 0-6 2.69-6 6s2.69 6 6 6c2.61 0 4.83-1.67 5.65-4H17v4h4v-4h2v-4H12.65zM7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"
                                        />
                                      </svg>
                                    </SvgIcon>
                                  </WithStyles(SvgIcon)>
                                </VpnKeyIcon>
                              </pure(VpnKeyIcon)>
                                
                              Save and manage Tags
                            </span>
                            <NoSsr
                              defer={false}
                              fallback={null}
                            >
                              <WithStyles(TouchRipple)
                                center={false}
                                innerRef={[Function]}
                              >
                                <TouchRipple
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child-193",
                                      "childLeaving": "MuiTouchRipple-childLeaving-194",
                                      "childPulsate": "MuiTouchRipple-childPulsate-195",
                                      "ripple": "MuiTouchRipple-ripple-190",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate-192",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible-191",
                                      "root": "MuiTouchRipple-root-189",
                                    }
                                  }
                                >
                                  <TransitionGroup
                                    childFactory={[Function]}
                                    className="MuiTouchRipple-root-189"
                                    component="span"
                                    enter={true}
                                    exit={true}
                                  >
                                    <span
                                      className="MuiTouchRipple-root-189"
                                    />
                                  </TransitionGroup>
                                </TouchRipple>
                              </WithStyles(TouchRipple)>
                            </NoSsr>
                          </button>
                        </ButtonBase>
                      </WithStyles(ButtonBase)>
                    </Button>
                  </WithStyles(Button)>
                  <WithStyles(Button)
                    className="detail-panel-add-access-button"
                    color="primary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    <Button
                      className="detail-panel-add-access-button"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit-184",
                          "contained": "MuiButton-contained-174",
                          "containedPrimary": "MuiButton-containedPrimary-175",
                          "containedSecondary": "MuiButton-containedSecondary-176",
                          "disabled": "MuiButton-disabled-183",
                          "extendedFab": "MuiButton-extendedFab-181",
                          "fab": "MuiButton-fab-180",
                          "flat": "MuiButton-flat-168",
                          "flatPrimary": "MuiButton-flatPrimary-169",
                          "flatSecondary": "MuiButton-flatSecondary-170",
                          "focusVisible": "MuiButton-focusVisible-182",
                          "fullWidth": "MuiButton-fullWidth-188",
                          "label": "MuiButton-label-164",
                          "mini": "MuiButton-mini-185",
                          "outlined": "MuiButton-outlined-171",
                          "outlinedPrimary": "MuiButton-outlinedPrimary-172",
                          "outlinedSecondary": "MuiButton-outlinedSecondary-173",
                          "raised": "MuiButton-raised-177",
                          "raisedPrimary": "MuiButton-raisedPrimary-178",
                          "raisedSecondary": "MuiButton-raisedSecondary-179",
                          "root": "MuiButton-root-163",
                          "sizeLarge": "MuiButton-sizeLarge-187",
                          "sizeSmall": "MuiButton-sizeSmall-186",
                          "text": "MuiButton-text-165",
                          "textPrimary": "MuiButton-textPrimary-166",
                          "textSecondary": "MuiButton-textSecondary-167",
                        }
                      }
                      color="primary"
                      component="button"
                      disableFocusRipple={false}
                      disabled={false}
                      fullWidth={false}
                      mini={false}
                      onClick={[Function]}
                      size="medium"
                      type="button"
                      variant="contained"
                    >
                      <WithStyles(ButtonBase)
                        className="MuiButton-root-163 MuiButton-contained-174 MuiButton-containedPrimary-175 MuiButton-raised-177 MuiButton-raisedPrimary-178 detail-panel-add-access-button"
                        component="button"
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="MuiButton-focusVisible-182"
                        onClick={[Function]}
                        type="button"
                      >
                        <ButtonBase
                          centerRipple={false}
                          className="MuiButton-root-163 MuiButton-contained-174 MuiButton-containedPrimary-175 MuiButton-raised-177 MuiButton-raisedPrimary-178 detail-panel-add-access-button"
                          classes={
                            Object {
                              "disabled": "MuiButtonBase-disabled-60",
                              "focusVisible": "MuiButtonBase-focusVisible-61",
                              "root": "MuiButtonBase-root-59",
                            }
                          }
                          component="button"
                          disableRipple={false}
                          disableTouchRipple={false}
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="MuiButton-focusVisible-182"
                          onClick={[Function]}
                          tabIndex="0"
                          type="button"
                        >
                          <button
                            className="MuiButtonBase-root-59 MuiButton-root-163 MuiButton-contained-174 MuiButton-containedPrimary-175 MuiButton-raised-177 MuiButton-raisedPrimary-178 detail-panel-add-access-button"
                            disabled={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onContextMenu={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex="0"
                            type="button"
                          >
                            <span
                              className="MuiButton-label-164"
                            >
                              <pure(MeetingRoomIcon)>
                                <MeetingRoomIcon>
                                  <WithStyles(SvgIcon)>
                                    <SvgIcon
                                      classes={
                                        Object {
                                          "colorAction": "MuiSvgIcon-colorAction-31",
                                          "colorDisabled": "MuiSvgIcon-colorDisabled-33",
                                          "colorError": "MuiSvgIcon-colorError-32",
                                          "colorPrimary": "MuiSvgIcon-colorPrimary-29",
                                          "colorSecondary": "MuiSvgIcon-colorSecondary-30",
                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-34",
                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-36",
                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-35",
                                          "root": "MuiSvgIcon-root-28",
                                        }
                                      }
                                      color="inherit"
                                      component="svg"
                                      fontSize="default"
                                      viewBox="0 0 24 24"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className="MuiSvgIcon-root-28"
                                        focusable="false"
                                        role="presentation"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M14 6v15H3v-2h2V3h9v1h5v15h2v2h-4V6h-3zm-4 5v2h2v-2h-2z"
                                        />
                                      </svg>
                                    </SvgIcon>
                                  </WithStyles(SvgIcon)>
                                </MeetingRoomIcon>
                              </pure(MeetingRoomIcon)>
                                
                              Save and manage Access
                            </span>
                            <NoSsr
                              defer={false}
                              fallback={null}
                            >
                              <WithStyles(TouchRipple)
                                center={false}
                                innerRef={[Function]}
                              >
                                <TouchRipple
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child-193",
                                      "childLeaving": "MuiTouchRipple-childLeaving-194",
                                      "childPulsate": "MuiTouchRipple-childPulsate-195",
                                      "ripple": "MuiTouchRipple-ripple-190",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate-192",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible-191",
                                      "root": "MuiTouchRipple-root-189",
                                    }
                                  }
                                >
                                  <TransitionGroup
                                    childFactory={[Function]}
                                    className="MuiTouchRipple-root-189"
                                    component="span"
                                    enter={true}
                                    exit={true}
                                  >
                                    <span
                                      className="MuiTouchRipple-root-189"
                                    />
                                  </TransitionGroup>
                                </TouchRipple>
                              </WithStyles(TouchRipple)>
                            </NoSsr>
                          </button>
                        </ButtonBase>
                      </WithStyles(ButtonBase)>
                    </Button>
                  </WithStyles(Button)>
                </div>
              </Styled(div)>
            </div>
          </Styled(div)>
        </Boundary>
      </div>
    </Styled(div)>
  </CreateVisitPanel>
</inject-CreateVisitPanel-with-profiles-routing-visits>
`;

exports[`<CreateVisitPanel /> renders correctly 1`] = `
<CreateVisitPanel
  match={
    Object {
      "params": Object {
        "profileId": "123",
      },
    }
  }
  profiles={
    ProfilesMock {
      "getDetail": [MockFunction],
      "getList": [MockFunction],
      "isError": false,
      "isLoading": false,
      "item": Object {
        "company": "test 123",
        "created": "2019-04-16T12:03:37.493156",
        "emailAddress": "dsg@dsf.com",
        "firstName": "Clark",
        "id": "1aa657bc-d556-4643-a68f-af46f1bdba89",
        "lastName": "Kent",
        "mobileNumber": "01234567890",
        "notes": "fdsdfsfs",
        "visits": Array [
          Object {
            "archetypeIds": Array [],
            "fromDate": "2015-03-23T11:00:00Z",
            "id": "d3aa88e2-c754-41e0-8ba6-4198a34aa0a2",
            "lockGroups": Array [
              "Default",
              "Boiler",
              "1.11",
            ],
            "tags": Array [
              "123123",
              "234234",
              "345345",
            ],
            "toDate": "2015-11-25T12:00:00Z",
          },
        ],
      },
      "items": Array [
        Object {
          "company": "test 123",
          "created": "2019-04-16T12:03:37.493156",
          "emailAddress": "dsg@dsf.com",
          "firstName": "Clark",
          "id": "1aa657bc-d556-4643-a68f-af46f1bdba89",
          "lastName": "Kent",
          "mobileNumber": "01234567890",
          "notes": "fdsdfsfs",
          "visits": Array [
            Object {
              "archetypeIds": Array [],
              "fromDate": "2015-03-23T11:00:00Z",
              "id": "d3aa88e2-c754-41e0-8ba6-4198a34aa0a2",
              "lockGroups": Array [
                "Default",
                "Boiler",
                "1.11",
              ],
              "tags": Array [
                "123123",
                "234234",
                "345345",
              ],
              "toDate": "2015-11-25T12:00:00Z",
            },
          ],
        },
      ],
    }
  }
  routing={
    RoutingMock {
      "breadcrumb": Array [],
      "getBreadcrumb": [MockFunction],
      "go": [MockFunction],
      "goBack": [MockFunction],
      "goBackToPage": [MockFunction],
      "goForward": [MockFunction],
      "goToPage": [MockFunction],
      "history": Object {},
      "location": Object {},
      "push": [MockFunction],
      "replace": [MockFunction],
      "splitThings": [MockFunction],
    }
  }
  saveFn={[MockFunction]}
  visits={
    VisitsMock {
      "addTag": [Function],
      "archetypes": Object {
        "primary": Array [],
        "secondary": Array [],
      },
      "clearErrors": [MockFunction],
      "detail": Visit {
        "archetypeIds": Array [],
        "fromDate": "",
        "id": "",
        "lockGroups": Array [],
        "tags": Array [],
        "toDate": "",
      },
      "getArchetypes": [MockFunction],
      "item": [Function],
      "simulateValidationError": [Function],
      "validationError": undefined,
    }
  }
/>
`;

exports[`<CreateVisitPanel /> selects an archetype 1`] = `
<CreateVisitPanel
  match={
    Object {
      "params": Object {
        "profileId": "123",
      },
    }
  }
  profiles={
    ProfilesMock {
      "getDetail": [MockFunction],
      "getList": [MockFunction],
      "isError": false,
      "isLoading": false,
      "item": Object {
        "company": "test 123",
        "created": "2019-04-16T12:03:37.493156",
        "emailAddress": "dsg@dsf.com",
        "firstName": "Clark",
        "id": "1aa657bc-d556-4643-a68f-af46f1bdba89",
        "lastName": "Kent",
        "mobileNumber": "01234567890",
        "notes": "fdsdfsfs",
        "visits": Array [
          Object {
            "archetypeIds": Array [],
            "fromDate": "2015-03-23T11:00:00Z",
            "id": "d3aa88e2-c754-41e0-8ba6-4198a34aa0a2",
            "lockGroups": Array [
              "Default",
              "Boiler",
              "1.11",
            ],
            "tags": Array [
              "123123",
              "234234",
              "345345",
            ],
            "toDate": "2015-11-25T12:00:00Z",
          },
        ],
      },
      "items": Array [
        Object {
          "company": "test 123",
          "created": "2019-04-16T12:03:37.493156",
          "emailAddress": "dsg@dsf.com",
          "firstName": "Clark",
          "id": "1aa657bc-d556-4643-a68f-af46f1bdba89",
          "lastName": "Kent",
          "mobileNumber": "01234567890",
          "notes": "fdsdfsfs",
          "visits": Array [
            Object {
              "archetypeIds": Array [],
              "fromDate": "2015-03-23T11:00:00Z",
              "id": "d3aa88e2-c754-41e0-8ba6-4198a34aa0a2",
              "lockGroups": Array [
                "Default",
                "Boiler",
                "1.11",
              ],
              "tags": Array [
                "123123",
                "234234",
                "345345",
              ],
              "toDate": "2015-11-25T12:00:00Z",
            },
          ],
        },
      ],
    }
  }
  routing={
    RoutingMock {
      "breadcrumb": Array [],
      "getBreadcrumb": [MockFunction],
      "go": [MockFunction],
      "goBack": [MockFunction],
      "goBackToPage": [MockFunction],
      "goForward": [MockFunction],
      "goToPage": [MockFunction],
      "history": Object {},
      "location": Object {},
      "push": [MockFunction],
      "replace": [MockFunction],
      "splitThings": [MockFunction],
    }
  }
  saveFn={[MockFunction]}
  visits={
    VisitsMock {
      "addTag": [Function],
      "archetypes": Object {
        "primary": Array [
          Object {
            "ArchetypeLockGroupNames": Array [
              "lockGroup1",
              "lockGroup2",
            ],
            "archetypeName": "Short Stay",
            "archetypePrimary": true,
            "id": "d3aa88e2-c754-41e0-8ba6-4198a34aa0a1",
          },
        ],
        "secondary": Array [],
      },
      "clearErrors": [MockFunction],
      "detail": Visit {
        "archetypeIds": Array [],
        "fromDate": "",
        "id": "",
        "lockGroups": Array [],
        "tags": Array [],
        "toDate": "",
      },
      "getArchetypes": [MockFunction],
      "item": [Function],
      "rawArchetypes": Array [
        Object {
          "ArchetypeLockGroupNames": Array [
            "lockGroup1",
            "lockGroup2",
          ],
          "archetypeName": "Short Stay",
          "archetypePrimary": true,
          "id": "d3aa88e2-c754-41e0-8ba6-4198a34aa0a1",
        },
      ],
      "simulateValidationError": [Function],
      "validationError": undefined,
    }
  }
/>
`;
